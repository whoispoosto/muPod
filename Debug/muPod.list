
muPod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b98  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003d2c  08003d2c  00004d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d58  08003d58  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d58  08003d58  00004d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d60  08003d60  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d60  08003d60  00004d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d64  08003d64  00004d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003d68  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  08003d74  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08003d74  00005110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c679  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000210b  00000000  00000000  000116b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  000137c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000810  00000000  00000000  00014270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172f0  00000000  00000000  00014a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db8f  00000000  00000000  0002bd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a5c5  00000000  00000000  000398ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c3ec4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a30  00000000  00000000  000c3f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000c6938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003d14 	.word	0x08003d14

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003d14 	.word	0x08003d14

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fab4 	bl	8000a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f80a 	bl	80004e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f8c4 	bl	800065c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d4:	f000 f898 	bl	8000608 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80004d8:	f003 fa04 	bl	80038e4 <MX_FATFS_Init>
  MX_SDIO_SD_Init();
 80004dc:	f000 f86e 	bl	80005bc <MX_SDIO_SD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e0:	bf00      	nop
 80004e2:	e7fd      	b.n	80004e0 <main+0x1c>

080004e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b094      	sub	sp, #80	@ 0x50
 80004e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ea:	f107 0320 	add.w	r3, r7, #32
 80004ee:	2230      	movs	r2, #48	@ 0x30
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f003 fbe1 	bl	8003cba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f8:	f107 030c 	add.w	r3, r7, #12
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
 8000506:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000508:	2300      	movs	r3, #0
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	4b29      	ldr	r3, [pc, #164]	@ (80005b4 <SystemClock_Config+0xd0>)
 800050e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000510:	4a28      	ldr	r2, [pc, #160]	@ (80005b4 <SystemClock_Config+0xd0>)
 8000512:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000516:	6413      	str	r3, [r2, #64]	@ 0x40
 8000518:	4b26      	ldr	r3, [pc, #152]	@ (80005b4 <SystemClock_Config+0xd0>)
 800051a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800051c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000524:	2300      	movs	r3, #0
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	4b23      	ldr	r3, [pc, #140]	@ (80005b8 <SystemClock_Config+0xd4>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000530:	4a21      	ldr	r2, [pc, #132]	@ (80005b8 <SystemClock_Config+0xd4>)
 8000532:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000536:	6013      	str	r3, [r2, #0]
 8000538:	4b1f      	ldr	r3, [pc, #124]	@ (80005b8 <SystemClock_Config+0xd4>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000544:	2302      	movs	r3, #2
 8000546:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000548:	2301      	movs	r3, #1
 800054a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054c:	2310      	movs	r3, #16
 800054e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000550:	2302      	movs	r3, #2
 8000552:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000554:	2300      	movs	r3, #0
 8000556:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000558:	2310      	movs	r3, #16
 800055a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800055c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000560:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000562:	2304      	movs	r3, #4
 8000564:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000566:	2307      	movs	r3, #7
 8000568:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	4618      	mov	r0, r3
 8000570:	f000 fd92 	bl	8001098 <HAL_RCC_OscConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800057a:	f000 f8f9 	bl	8000770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057e:	230f      	movs	r3, #15
 8000580:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000582:	2302      	movs	r3, #2
 8000584:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800058a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800058e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2102      	movs	r1, #2
 800059a:	4618      	mov	r0, r3
 800059c:	f000 fff4 	bl	8001588 <HAL_RCC_ClockConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005a6:	f000 f8e3 	bl	8000770 <Error_Handler>
  }
}
 80005aa:	bf00      	nop
 80005ac:	3750      	adds	r7, #80	@ 0x50
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40007000 	.word	0x40007000

080005bc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <MX_SDIO_SD_Init+0x44>)
 80005c2:	4a10      	ldr	r2, [pc, #64]	@ (8000604 <MX_SDIO_SD_Init+0x48>)
 80005c4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <MX_SDIO_SD_Init+0x44>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <MX_SDIO_SD_Init+0x44>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000600 <MX_SDIO_SD_Init+0x44>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80005d8:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <MX_SDIO_SD_Init+0x44>)
 80005da:	2200      	movs	r2, #0
 80005dc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80005de:	4b08      	ldr	r3, [pc, #32]	@ (8000600 <MX_SDIO_SD_Init+0x44>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80005e4:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <MX_SDIO_SD_Init+0x44>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  if (MicroSD_Open(&hsd) != MICROSD_SUCCESS)
 80005ea:	4805      	ldr	r0, [pc, #20]	@ (8000600 <MX_SDIO_SD_Init+0x44>)
 80005ec:	f000 f8c6 	bl	800077c <MicroSD_Open>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_SDIO_SD_Init+0x3e>
  {
	  // TODO: research best practices for error handling on STM32
	  Error_Handler();
 80005f6:	f000 f8bb 	bl	8000770 <Error_Handler>
  }
  /* USER CODE END SDIO_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000028 	.word	0x20000028
 8000604:	40012c00 	.word	0x40012c00

08000608 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800060c:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <MX_USART2_UART_Init+0x4c>)
 800060e:	4a12      	ldr	r2, [pc, #72]	@ (8000658 <MX_USART2_UART_Init+0x50>)
 8000610:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000612:	4b10      	ldr	r3, [pc, #64]	@ (8000654 <MX_USART2_UART_Init+0x4c>)
 8000614:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000618:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800061a:	4b0e      	ldr	r3, [pc, #56]	@ (8000654 <MX_USART2_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000620:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <MX_USART2_UART_Init+0x4c>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000626:	4b0b      	ldr	r3, [pc, #44]	@ (8000654 <MX_USART2_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800062c:	4b09      	ldr	r3, [pc, #36]	@ (8000654 <MX_USART2_UART_Init+0x4c>)
 800062e:	220c      	movs	r2, #12
 8000630:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000632:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <MX_USART2_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000638:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <MX_USART2_UART_Init+0x4c>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800063e:	4805      	ldr	r0, [pc, #20]	@ (8000654 <MX_USART2_UART_Init+0x4c>)
 8000640:	f002 f95a 	bl	80028f8 <HAL_UART_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800064a:	f000 f891 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200000ac 	.word	0x200000ac
 8000658:	40004400 	.word	0x40004400

0800065c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	@ 0x28
 8000660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]
 8000676:	4b3b      	ldr	r3, [pc, #236]	@ (8000764 <MX_GPIO_Init+0x108>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	4a3a      	ldr	r2, [pc, #232]	@ (8000764 <MX_GPIO_Init+0x108>)
 800067c:	f043 0304 	orr.w	r3, r3, #4
 8000680:	6313      	str	r3, [r2, #48]	@ 0x30
 8000682:	4b38      	ldr	r3, [pc, #224]	@ (8000764 <MX_GPIO_Init+0x108>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	f003 0304 	and.w	r3, r3, #4
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	4b34      	ldr	r3, [pc, #208]	@ (8000764 <MX_GPIO_Init+0x108>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	4a33      	ldr	r2, [pc, #204]	@ (8000764 <MX_GPIO_Init+0x108>)
 8000698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800069c:	6313      	str	r3, [r2, #48]	@ 0x30
 800069e:	4b31      	ldr	r3, [pc, #196]	@ (8000764 <MX_GPIO_Init+0x108>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000764 <MX_GPIO_Init+0x108>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4a2c      	ldr	r2, [pc, #176]	@ (8000764 <MX_GPIO_Init+0x108>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000764 <MX_GPIO_Init+0x108>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	4b26      	ldr	r3, [pc, #152]	@ (8000764 <MX_GPIO_Init+0x108>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	4a25      	ldr	r2, [pc, #148]	@ (8000764 <MX_GPIO_Init+0x108>)
 80006d0:	f043 0308 	orr.w	r3, r3, #8
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d6:	4b23      	ldr	r3, [pc, #140]	@ (8000764 <MX_GPIO_Init+0x108>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	f003 0308 	and.w	r3, r3, #8
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000764 <MX_GPIO_Init+0x108>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a1e      	ldr	r2, [pc, #120]	@ (8000764 <MX_GPIO_Init+0x108>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000764 <MX_GPIO_Init+0x108>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2120      	movs	r1, #32
 8000702:	4819      	ldr	r0, [pc, #100]	@ (8000768 <MX_GPIO_Init+0x10c>)
 8000704:	f000 fcae 	bl	8001064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000708:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800070c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800070e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4619      	mov	r1, r3
 800071e:	4813      	ldr	r0, [pc, #76]	@ (800076c <MX_GPIO_Init+0x110>)
 8000720:	f000 fb04 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000724:	2320      	movs	r3, #32
 8000726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4619      	mov	r1, r3
 800073a:	480b      	ldr	r0, [pc, #44]	@ (8000768 <MX_GPIO_Init+0x10c>)
 800073c:	f000 faf6 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8000740:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	4619      	mov	r1, r3
 8000754:	4804      	ldr	r0, [pc, #16]	@ (8000768 <MX_GPIO_Init+0x10c>)
 8000756:	f000 fae9 	bl	8000d2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800075a:	bf00      	nop
 800075c:	3728      	adds	r7, #40	@ 0x28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40020000 	.word	0x40020000
 800076c:	40020800 	.word	0x40020800

08000770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000774:	b672      	cpsid	i
}
 8000776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <Error_Handler+0x8>

0800077c <MicroSD_Open>:

#include "microsd.h"

static SD_HandleTypeDef * sd_handle;

microsd_ret_t MicroSD_Open(SD_HandleTypeDef * handle) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	if (HAL_SD_Init(handle) != HAL_OK)
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f001 f91f 	bl	80019c8 <HAL_SD_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d002      	beq.n	8000796 <MicroSD_Open+0x1a>
	{
		return MICROSD_ERROR_UNABLE_TO_OPEN;
 8000790:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000794:	e003      	b.n	800079e <MicroSD_Open+0x22>
	}

	sd_handle = handle;
 8000796:	4a04      	ldr	r2, [pc, #16]	@ (80007a8 <MicroSD_Open+0x2c>)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	6013      	str	r3, [r2, #0]

	return MICROSD_SUCCESS;
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200000f4 	.word	0x200000f4

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b10      	ldr	r3, [pc, #64]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ba:	4a0f      	ldr	r2, [pc, #60]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007c2:	4b0d      	ldr	r3, [pc, #52]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d6:	4a08      	ldr	r2, [pc, #32]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800

080007fc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	@ 0x28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a28      	ldr	r2, [pc, #160]	@ (80008bc <HAL_SD_MspInit+0xc0>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d14a      	bne.n	80008b4 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	4b27      	ldr	r3, [pc, #156]	@ (80008c0 <HAL_SD_MspInit+0xc4>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000826:	4a26      	ldr	r2, [pc, #152]	@ (80008c0 <HAL_SD_MspInit+0xc4>)
 8000828:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800082c:	6453      	str	r3, [r2, #68]	@ 0x44
 800082e:	4b24      	ldr	r3, [pc, #144]	@ (80008c0 <HAL_SD_MspInit+0xc4>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000832:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	4b20      	ldr	r3, [pc, #128]	@ (80008c0 <HAL_SD_MspInit+0xc4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a1f      	ldr	r2, [pc, #124]	@ (80008c0 <HAL_SD_MspInit+0xc4>)
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b1d      	ldr	r3, [pc, #116]	@ (80008c0 <HAL_SD_MspInit+0xc4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	4b19      	ldr	r3, [pc, #100]	@ (80008c0 <HAL_SD_MspInit+0xc4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a18      	ldr	r2, [pc, #96]	@ (80008c0 <HAL_SD_MspInit+0xc4>)
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b16      	ldr	r3, [pc, #88]	@ (80008c0 <HAL_SD_MspInit+0xc4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0308 	and.w	r3, r3, #8
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000872:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8000876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000880:	2303      	movs	r3, #3
 8000882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000884:	230c      	movs	r3, #12
 8000886:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	480d      	ldr	r0, [pc, #52]	@ (80008c4 <HAL_SD_MspInit+0xc8>)
 8000890:	f000 fa4c 	bl	8000d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000894:	2304      	movs	r3, #4
 8000896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a0:	2303      	movs	r3, #3
 80008a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008a4:	230c      	movs	r3, #12
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	4806      	ldr	r0, [pc, #24]	@ (80008c8 <HAL_SD_MspInit+0xcc>)
 80008b0:	f000 fa3c 	bl	8000d2c <HAL_GPIO_Init>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 80008b4:	bf00      	nop
 80008b6:	3728      	adds	r7, #40	@ 0x28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40012c00 	.word	0x40012c00
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020800 	.word	0x40020800
 80008c8:	40020c00 	.word	0x40020c00

080008cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	@ 0x28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a19      	ldr	r2, [pc, #100]	@ (8000950 <HAL_UART_MspInit+0x84>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d12b      	bne.n	8000946 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	4b18      	ldr	r3, [pc, #96]	@ (8000954 <HAL_UART_MspInit+0x88>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f6:	4a17      	ldr	r2, [pc, #92]	@ (8000954 <HAL_UART_MspInit+0x88>)
 80008f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80008fe:	4b15      	ldr	r3, [pc, #84]	@ (8000954 <HAL_UART_MspInit+0x88>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <HAL_UART_MspInit+0x88>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a10      	ldr	r2, [pc, #64]	@ (8000954 <HAL_UART_MspInit+0x88>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <HAL_UART_MspInit+0x88>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000926:	230c      	movs	r3, #12
 8000928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000936:	2307      	movs	r3, #7
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	4805      	ldr	r0, [pc, #20]	@ (8000958 <HAL_UART_MspInit+0x8c>)
 8000942:	f000 f9f3 	bl	8000d2c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	@ 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40004400 	.word	0x40004400
 8000954:	40023800 	.word	0x40023800
 8000958:	40020000 	.word	0x40020000

0800095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <NMI_Handler+0x4>

08000964 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <HardFault_Handler+0x4>

0800096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <MemManage_Handler+0x4>

08000974 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <BusFault_Handler+0x4>

0800097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <UsageFault_Handler+0x4>

08000984 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b2:	f000 f891 	bl	8000ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <SystemInit+0x20>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009c6:	4a05      	ldr	r2, [pc, #20]	@ (80009dc <SystemInit+0x20>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009e4:	f7ff ffea 	bl	80009bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009e8:	480c      	ldr	r0, [pc, #48]	@ (8000a1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ea:	490d      	ldr	r1, [pc, #52]	@ (8000a20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000a24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000a28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a00:	4c0a      	ldr	r4, [pc, #40]	@ (8000a2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000a0e:	f003 f95d 	bl	8003ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a12:	f7ff fd57 	bl	80004c4 <main>
  bx  lr    
 8000a16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a18:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a24:	08003d68 	.word	0x08003d68
  ldr r2, =_sbss
 8000a28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a2c:	20000110 	.word	0x20000110

08000a30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a30:	e7fe      	b.n	8000a30 <ADC_IRQHandler>
	...

08000a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a38:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <HAL_Init+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a74 <HAL_Init+0x40>)
 8000a3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a44:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <HAL_Init+0x40>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a0a      	ldr	r2, [pc, #40]	@ (8000a74 <HAL_Init+0x40>)
 8000a4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a50:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <HAL_Init+0x40>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a07      	ldr	r2, [pc, #28]	@ (8000a74 <HAL_Init+0x40>)
 8000a56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f000 f931 	bl	8000cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a62:	2000      	movs	r0, #0
 8000a64:	f000 f808 	bl	8000a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a68:	f7ff fea0 	bl	80007ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023c00 	.word	0x40023c00

08000a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a80:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <HAL_InitTick+0x54>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <HAL_InitTick+0x58>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 f93b 	bl	8000d12 <HAL_SYSTICK_Config>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00e      	b.n	8000ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b0f      	cmp	r3, #15
 8000aaa:	d80a      	bhi.n	8000ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aac:	2200      	movs	r2, #0
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ab4:	f000 f911 	bl	8000cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab8:	4a06      	ldr	r2, [pc, #24]	@ (8000ad4 <HAL_InitTick+0x5c>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e000      	b.n	8000ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	20000004 	.word	0x20000004

08000ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <HAL_IncTick+0x20>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <HAL_IncTick+0x24>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4a04      	ldr	r2, [pc, #16]	@ (8000afc <HAL_IncTick+0x24>)
 8000aea:	6013      	str	r3, [r2, #0]
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000008 	.word	0x20000008
 8000afc:	200000f8 	.word	0x200000f8

08000b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return uwTick;
 8000b04:	4b03      	ldr	r3, [pc, #12]	@ (8000b14 <HAL_GetTick+0x14>)
 8000b06:	681b      	ldr	r3, [r3, #0]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	200000f8 	.word	0x200000f8

08000b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b20:	f7ff ffee 	bl	8000b00 <HAL_GetTick>
 8000b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b30:	d005      	beq.n	8000b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b32:	4b0a      	ldr	r3, [pc, #40]	@ (8000b5c <HAL_Delay+0x44>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b3e:	bf00      	nop
 8000b40:	f7ff ffde 	bl	8000b00 <HAL_GetTick>
 8000b44:	4602      	mov	r2, r0
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d8f7      	bhi.n	8000b40 <HAL_Delay+0x28>
  {
  }
}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000008 	.word	0x20000008

08000b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b92:	4a04      	ldr	r2, [pc, #16]	@ (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	60d3      	str	r3, [r2, #12]
}
 8000b98:	bf00      	nop
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bac:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	f003 0307 	and.w	r3, r3, #7
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	6039      	str	r1, [r7, #0]
 8000bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	db0a      	blt.n	8000bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	490c      	ldr	r1, [pc, #48]	@ (8000c10 <__NVIC_SetPriority+0x4c>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	0112      	lsls	r2, r2, #4
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	440b      	add	r3, r1
 8000be8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bec:	e00a      	b.n	8000c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4908      	ldr	r1, [pc, #32]	@ (8000c14 <__NVIC_SetPriority+0x50>)
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	f003 030f 	and.w	r3, r3, #15
 8000bfa:	3b04      	subs	r3, #4
 8000bfc:	0112      	lsls	r2, r2, #4
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	440b      	add	r3, r1
 8000c02:	761a      	strb	r2, [r3, #24]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000e100 	.word	0xe000e100
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b089      	sub	sp, #36	@ 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	f1c3 0307 	rsb	r3, r3, #7
 8000c32:	2b04      	cmp	r3, #4
 8000c34:	bf28      	it	cs
 8000c36:	2304      	movcs	r3, #4
 8000c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	2b06      	cmp	r3, #6
 8000c40:	d902      	bls.n	8000c48 <NVIC_EncodePriority+0x30>
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3b03      	subs	r3, #3
 8000c46:	e000      	b.n	8000c4a <NVIC_EncodePriority+0x32>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43da      	mvns	r2, r3
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	43d9      	mvns	r1, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	4313      	orrs	r3, r2
         );
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3724      	adds	r7, #36	@ 0x24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c90:	d301      	bcc.n	8000c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00f      	b.n	8000cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c96:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc0 <SysTick_Config+0x40>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9e:	210f      	movs	r1, #15
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ca4:	f7ff ff8e 	bl	8000bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca8:	4b05      	ldr	r3, [pc, #20]	@ (8000cc0 <SysTick_Config+0x40>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cae:	4b04      	ldr	r3, [pc, #16]	@ (8000cc0 <SysTick_Config+0x40>)
 8000cb0:	2207      	movs	r2, #7
 8000cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	e000e010 	.word	0xe000e010

08000cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ff47 	bl	8000b60 <__NVIC_SetPriorityGrouping>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cec:	f7ff ff5c 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	68b9      	ldr	r1, [r7, #8]
 8000cf6:	6978      	ldr	r0, [r7, #20]
 8000cf8:	f7ff ff8e 	bl	8000c18 <NVIC_EncodePriority>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d02:	4611      	mov	r1, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff5d 	bl	8000bc4 <__NVIC_SetPriority>
}
 8000d0a:	bf00      	nop
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff ffb0 	bl	8000c80 <SysTick_Config>
 8000d20:	4603      	mov	r3, r0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	@ 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
 8000d46:	e159      	b.n	8000ffc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d48:	2201      	movs	r2, #1
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	f040 8148 	bne.w	8000ff6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d005      	beq.n	8000d7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d130      	bne.n	8000de0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	2203      	movs	r2, #3
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4013      	ands	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	68da      	ldr	r2, [r3, #12]
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db4:	2201      	movs	r2, #1
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	091b      	lsrs	r3, r3, #4
 8000dca:	f003 0201 	and.w	r2, r3, #1
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	d017      	beq.n	8000e1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	2203      	movs	r2, #3
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	689a      	ldr	r2, [r3, #8]
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0303 	and.w	r3, r3, #3
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d123      	bne.n	8000e70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	08da      	lsrs	r2, r3, #3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3208      	adds	r2, #8
 8000e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	f003 0307 	and.w	r3, r3, #7
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	220f      	movs	r2, #15
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	691a      	ldr	r2, [r3, #16]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	08da      	lsrs	r2, r3, #3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3208      	adds	r2, #8
 8000e6a:	69b9      	ldr	r1, [r7, #24]
 8000e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0203 	and.w	r2, r3, #3
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f000 80a2 	beq.w	8000ff6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b57      	ldr	r3, [pc, #348]	@ (8001014 <HAL_GPIO_Init+0x2e8>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eba:	4a56      	ldr	r2, [pc, #344]	@ (8001014 <HAL_GPIO_Init+0x2e8>)
 8000ebc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ec0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ec2:	4b54      	ldr	r3, [pc, #336]	@ (8001014 <HAL_GPIO_Init+0x2e8>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ece:	4a52      	ldr	r2, [pc, #328]	@ (8001018 <HAL_GPIO_Init+0x2ec>)
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	089b      	lsrs	r3, r3, #2
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	220f      	movs	r2, #15
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a49      	ldr	r2, [pc, #292]	@ (800101c <HAL_GPIO_Init+0x2f0>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d019      	beq.n	8000f2e <HAL_GPIO_Init+0x202>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a48      	ldr	r2, [pc, #288]	@ (8001020 <HAL_GPIO_Init+0x2f4>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d013      	beq.n	8000f2a <HAL_GPIO_Init+0x1fe>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a47      	ldr	r2, [pc, #284]	@ (8001024 <HAL_GPIO_Init+0x2f8>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d00d      	beq.n	8000f26 <HAL_GPIO_Init+0x1fa>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a46      	ldr	r2, [pc, #280]	@ (8001028 <HAL_GPIO_Init+0x2fc>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d007      	beq.n	8000f22 <HAL_GPIO_Init+0x1f6>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a45      	ldr	r2, [pc, #276]	@ (800102c <HAL_GPIO_Init+0x300>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d101      	bne.n	8000f1e <HAL_GPIO_Init+0x1f2>
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	e008      	b.n	8000f30 <HAL_GPIO_Init+0x204>
 8000f1e:	2307      	movs	r3, #7
 8000f20:	e006      	b.n	8000f30 <HAL_GPIO_Init+0x204>
 8000f22:	2303      	movs	r3, #3
 8000f24:	e004      	b.n	8000f30 <HAL_GPIO_Init+0x204>
 8000f26:	2302      	movs	r3, #2
 8000f28:	e002      	b.n	8000f30 <HAL_GPIO_Init+0x204>
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e000      	b.n	8000f30 <HAL_GPIO_Init+0x204>
 8000f2e:	2300      	movs	r3, #0
 8000f30:	69fa      	ldr	r2, [r7, #28]
 8000f32:	f002 0203 	and.w	r2, r2, #3
 8000f36:	0092      	lsls	r2, r2, #2
 8000f38:	4093      	lsls	r3, r2
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f40:	4935      	ldr	r1, [pc, #212]	@ (8001018 <HAL_GPIO_Init+0x2ec>)
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	089b      	lsrs	r3, r3, #2
 8000f46:	3302      	adds	r3, #2
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f4e:	4b38      	ldr	r3, [pc, #224]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f72:	4a2f      	ldr	r2, [pc, #188]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f78:	4b2d      	ldr	r3, [pc, #180]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f9c:	4a24      	ldr	r2, [pc, #144]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fa2:	4b23      	ldr	r3, [pc, #140]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fc6:	4a1a      	ldr	r2, [pc, #104]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fcc:	4b18      	ldr	r3, [pc, #96]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ff0:	4a0f      	ldr	r2, [pc, #60]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	61fb      	str	r3, [r7, #28]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	2b0f      	cmp	r3, #15
 8001000:	f67f aea2 	bls.w	8000d48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001004:	bf00      	nop
 8001006:	bf00      	nop
 8001008:	3724      	adds	r7, #36	@ 0x24
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800
 8001018:	40013800 	.word	0x40013800
 800101c:	40020000 	.word	0x40020000
 8001020:	40020400 	.word	0x40020400
 8001024:	40020800 	.word	0x40020800
 8001028:	40020c00 	.word	0x40020c00
 800102c:	40021000 	.word	0x40021000
 8001030:	40013c00 	.word	0x40013c00

08001034 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	691a      	ldr	r2, [r3, #16]
 8001044:	887b      	ldrh	r3, [r7, #2]
 8001046:	4013      	ands	r3, r2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d002      	beq.n	8001052 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800104c:	2301      	movs	r3, #1
 800104e:	73fb      	strb	r3, [r7, #15]
 8001050:	e001      	b.n	8001056 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001052:	2300      	movs	r3, #0
 8001054:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001056:	7bfb      	ldrb	r3, [r7, #15]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	807b      	strh	r3, [r7, #2]
 8001070:	4613      	mov	r3, r2
 8001072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001074:	787b      	ldrb	r3, [r7, #1]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800107a:	887a      	ldrh	r2, [r7, #2]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001080:	e003      	b.n	800108a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001082:	887b      	ldrh	r3, [r7, #2]
 8001084:	041a      	lsls	r2, r3, #16
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	619a      	str	r2, [r3, #24]
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e267      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d075      	beq.n	80011a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010b6:	4b88      	ldr	r3, [pc, #544]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 030c 	and.w	r3, r3, #12
 80010be:	2b04      	cmp	r3, #4
 80010c0:	d00c      	beq.n	80010dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010c2:	4b85      	ldr	r3, [pc, #532]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010ca:	2b08      	cmp	r3, #8
 80010cc:	d112      	bne.n	80010f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ce:	4b82      	ldr	r3, [pc, #520]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010da:	d10b      	bne.n	80010f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010dc:	4b7e      	ldr	r3, [pc, #504]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d05b      	beq.n	80011a0 <HAL_RCC_OscConfig+0x108>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d157      	bne.n	80011a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e242      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010fc:	d106      	bne.n	800110c <HAL_RCC_OscConfig+0x74>
 80010fe:	4b76      	ldr	r3, [pc, #472]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a75      	ldr	r2, [pc, #468]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	e01d      	b.n	8001148 <HAL_RCC_OscConfig+0xb0>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001114:	d10c      	bne.n	8001130 <HAL_RCC_OscConfig+0x98>
 8001116:	4b70      	ldr	r3, [pc, #448]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a6f      	ldr	r2, [pc, #444]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 800111c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	4b6d      	ldr	r3, [pc, #436]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a6c      	ldr	r2, [pc, #432]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e00b      	b.n	8001148 <HAL_RCC_OscConfig+0xb0>
 8001130:	4b69      	ldr	r3, [pc, #420]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a68      	ldr	r2, [pc, #416]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001136:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b66      	ldr	r3, [pc, #408]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a65      	ldr	r2, [pc, #404]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001142:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d013      	beq.n	8001178 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fcd6 	bl	8000b00 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001158:	f7ff fcd2 	bl	8000b00 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b64      	cmp	r3, #100	@ 0x64
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e207      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116a:	4b5b      	ldr	r3, [pc, #364]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f0      	beq.n	8001158 <HAL_RCC_OscConfig+0xc0>
 8001176:	e014      	b.n	80011a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fcc2 	bl	8000b00 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001180:	f7ff fcbe 	bl	8000b00 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b64      	cmp	r3, #100	@ 0x64
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e1f3      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001192:	4b51      	ldr	r3, [pc, #324]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f0      	bne.n	8001180 <HAL_RCC_OscConfig+0xe8>
 800119e:	e000      	b.n	80011a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d063      	beq.n	8001276 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ae:	4b4a      	ldr	r3, [pc, #296]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 030c 	and.w	r3, r3, #12
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00b      	beq.n	80011d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ba:	4b47      	ldr	r3, [pc, #284]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011c2:	2b08      	cmp	r3, #8
 80011c4:	d11c      	bne.n	8001200 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011c6:	4b44      	ldr	r3, [pc, #272]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d116      	bne.n	8001200 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d2:	4b41      	ldr	r3, [pc, #260]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d005      	beq.n	80011ea <HAL_RCC_OscConfig+0x152>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d001      	beq.n	80011ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e1c7      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ea:	4b3b      	ldr	r3, [pc, #236]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	4937      	ldr	r1, [pc, #220]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fe:	e03a      	b.n	8001276 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d020      	beq.n	800124a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001208:	4b34      	ldr	r3, [pc, #208]	@ (80012dc <HAL_RCC_OscConfig+0x244>)
 800120a:	2201      	movs	r2, #1
 800120c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120e:	f7ff fc77 	bl	8000b00 <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001216:	f7ff fc73 	bl	8000b00 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e1a8      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001228:	4b2b      	ldr	r3, [pc, #172]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0f0      	beq.n	8001216 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001234:	4b28      	ldr	r3, [pc, #160]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	4925      	ldr	r1, [pc, #148]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001244:	4313      	orrs	r3, r2
 8001246:	600b      	str	r3, [r1, #0]
 8001248:	e015      	b.n	8001276 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800124a:	4b24      	ldr	r3, [pc, #144]	@ (80012dc <HAL_RCC_OscConfig+0x244>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001250:	f7ff fc56 	bl	8000b00 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001258:	f7ff fc52 	bl	8000b00 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e187      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800126a:	4b1b      	ldr	r3, [pc, #108]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	2b00      	cmp	r3, #0
 8001280:	d036      	beq.n	80012f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d016      	beq.n	80012b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800128a:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <HAL_RCC_OscConfig+0x248>)
 800128c:	2201      	movs	r2, #1
 800128e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001290:	f7ff fc36 	bl	8000b00 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001298:	f7ff fc32 	bl	8000b00 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e167      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012aa:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80012ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f0      	beq.n	8001298 <HAL_RCC_OscConfig+0x200>
 80012b6:	e01b      	b.n	80012f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012b8:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <HAL_RCC_OscConfig+0x248>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012be:	f7ff fc1f 	bl	8000b00 <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c4:	e00e      	b.n	80012e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c6:	f7ff fc1b 	bl	8000b00 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d907      	bls.n	80012e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e150      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
 80012d8:	40023800 	.word	0x40023800
 80012dc:	42470000 	.word	0x42470000
 80012e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e4:	4b88      	ldr	r3, [pc, #544]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 80012e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1ea      	bne.n	80012c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 8097 	beq.w	800142c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001302:	4b81      	ldr	r3, [pc, #516]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d10f      	bne.n	800132e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	4b7d      	ldr	r3, [pc, #500]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001316:	4a7c      	ldr	r2, [pc, #496]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800131c:	6413      	str	r3, [r2, #64]	@ 0x40
 800131e:	4b7a      	ldr	r3, [pc, #488]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800132a:	2301      	movs	r3, #1
 800132c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132e:	4b77      	ldr	r3, [pc, #476]	@ (800150c <HAL_RCC_OscConfig+0x474>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001336:	2b00      	cmp	r3, #0
 8001338:	d118      	bne.n	800136c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800133a:	4b74      	ldr	r3, [pc, #464]	@ (800150c <HAL_RCC_OscConfig+0x474>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a73      	ldr	r2, [pc, #460]	@ (800150c <HAL_RCC_OscConfig+0x474>)
 8001340:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001346:	f7ff fbdb 	bl	8000b00 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800134e:	f7ff fbd7 	bl	8000b00 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e10c      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001360:	4b6a      	ldr	r3, [pc, #424]	@ (800150c <HAL_RCC_OscConfig+0x474>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f0      	beq.n	800134e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d106      	bne.n	8001382 <HAL_RCC_OscConfig+0x2ea>
 8001374:	4b64      	ldr	r3, [pc, #400]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001378:	4a63      	ldr	r2, [pc, #396]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001380:	e01c      	b.n	80013bc <HAL_RCC_OscConfig+0x324>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	2b05      	cmp	r3, #5
 8001388:	d10c      	bne.n	80013a4 <HAL_RCC_OscConfig+0x30c>
 800138a:	4b5f      	ldr	r3, [pc, #380]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 800138c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800138e:	4a5e      	ldr	r2, [pc, #376]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	6713      	str	r3, [r2, #112]	@ 0x70
 8001396:	4b5c      	ldr	r3, [pc, #368]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800139a:	4a5b      	ldr	r2, [pc, #364]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80013a2:	e00b      	b.n	80013bc <HAL_RCC_OscConfig+0x324>
 80013a4:	4b58      	ldr	r3, [pc, #352]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 80013a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a8:	4a57      	ldr	r2, [pc, #348]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 80013aa:	f023 0301 	bic.w	r3, r3, #1
 80013ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80013b0:	4b55      	ldr	r3, [pc, #340]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 80013b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013b4:	4a54      	ldr	r2, [pc, #336]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 80013b6:	f023 0304 	bic.w	r3, r3, #4
 80013ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d015      	beq.n	80013f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c4:	f7ff fb9c 	bl	8000b00 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ca:	e00a      	b.n	80013e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013cc:	f7ff fb98 	bl	8000b00 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013da:	4293      	cmp	r3, r2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e0cb      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e2:	4b49      	ldr	r3, [pc, #292]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 80013e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0ee      	beq.n	80013cc <HAL_RCC_OscConfig+0x334>
 80013ee:	e014      	b.n	800141a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f0:	f7ff fb86 	bl	8000b00 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f6:	e00a      	b.n	800140e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013f8:	f7ff fb82 	bl	8000b00 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001406:	4293      	cmp	r3, r2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e0b5      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800140e:	4b3e      	ldr	r3, [pc, #248]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1ee      	bne.n	80013f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800141a:	7dfb      	ldrb	r3, [r7, #23]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d105      	bne.n	800142c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001420:	4b39      	ldr	r3, [pc, #228]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001424:	4a38      	ldr	r2, [pc, #224]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001426:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800142a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 80a1 	beq.w	8001578 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001436:	4b34      	ldr	r3, [pc, #208]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	2b08      	cmp	r3, #8
 8001440:	d05c      	beq.n	80014fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d141      	bne.n	80014ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144a:	4b31      	ldr	r3, [pc, #196]	@ (8001510 <HAL_RCC_OscConfig+0x478>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fb56 	bl	8000b00 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001458:	f7ff fb52 	bl	8000b00 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e087      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800146a:	4b27      	ldr	r3, [pc, #156]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69da      	ldr	r2, [r3, #28]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001484:	019b      	lsls	r3, r3, #6
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800148c:	085b      	lsrs	r3, r3, #1
 800148e:	3b01      	subs	r3, #1
 8001490:	041b      	lsls	r3, r3, #16
 8001492:	431a      	orrs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001498:	061b      	lsls	r3, r3, #24
 800149a:	491b      	ldr	r1, [pc, #108]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 800149c:	4313      	orrs	r3, r2
 800149e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <HAL_RCC_OscConfig+0x478>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a6:	f7ff fb2b 	bl	8000b00 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ae:	f7ff fb27 	bl	8000b00 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e05c      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c0:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x416>
 80014cc:	e054      	b.n	8001578 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ce:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <HAL_RCC_OscConfig+0x478>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff fb14 	bl	8000b00 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014dc:	f7ff fb10 	bl	8000b00 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e045      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ee:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0x444>
 80014fa:	e03d      	b.n	8001578 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d107      	bne.n	8001514 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e038      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
 8001508:	40023800 	.word	0x40023800
 800150c:	40007000 	.word	0x40007000
 8001510:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001514:	4b1b      	ldr	r3, [pc, #108]	@ (8001584 <HAL_RCC_OscConfig+0x4ec>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d028      	beq.n	8001574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800152c:	429a      	cmp	r2, r3
 800152e:	d121      	bne.n	8001574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153a:	429a      	cmp	r2, r3
 800153c:	d11a      	bne.n	8001574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001544:	4013      	ands	r3, r2
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800154a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800154c:	4293      	cmp	r3, r2
 800154e:	d111      	bne.n	8001574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800155a:	085b      	lsrs	r3, r3, #1
 800155c:	3b01      	subs	r3, #1
 800155e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001560:	429a      	cmp	r2, r3
 8001562:	d107      	bne.n	8001574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800156e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001570:	429a      	cmp	r2, r3
 8001572:	d001      	beq.n	8001578 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800

08001588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e0cc      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800159c:	4b68      	ldr	r3, [pc, #416]	@ (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d90c      	bls.n	80015c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015aa:	4b65      	ldr	r3, [pc, #404]	@ (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b2:	4b63      	ldr	r3, [pc, #396]	@ (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d001      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e0b8      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d020      	beq.n	8001612 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015dc:	4b59      	ldr	r3, [pc, #356]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	4a58      	ldr	r2, [pc, #352]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015f4:	4b53      	ldr	r3, [pc, #332]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	4a52      	ldr	r2, [pc, #328]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001600:	4b50      	ldr	r3, [pc, #320]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	494d      	ldr	r1, [pc, #308]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	4313      	orrs	r3, r2
 8001610:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d044      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d107      	bne.n	8001636 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001626:	4b47      	ldr	r3, [pc, #284]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d119      	bne.n	8001666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e07f      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d003      	beq.n	8001646 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001642:	2b03      	cmp	r3, #3
 8001644:	d107      	bne.n	8001656 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001646:	4b3f      	ldr	r3, [pc, #252]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d109      	bne.n	8001666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e06f      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001656:	4b3b      	ldr	r3, [pc, #236]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e067      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001666:	4b37      	ldr	r3, [pc, #220]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f023 0203 	bic.w	r2, r3, #3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	4934      	ldr	r1, [pc, #208]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001674:	4313      	orrs	r3, r2
 8001676:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001678:	f7ff fa42 	bl	8000b00 <HAL_GetTick>
 800167c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167e:	e00a      	b.n	8001696 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001680:	f7ff fa3e 	bl	8000b00 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e04f      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001696:	4b2b      	ldr	r3, [pc, #172]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 020c 	and.w	r2, r3, #12
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d1eb      	bne.n	8001680 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016a8:	4b25      	ldr	r3, [pc, #148]	@ (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d20c      	bcs.n	80016d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b6:	4b22      	ldr	r3, [pc, #136]	@ (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016be:	4b20      	ldr	r3, [pc, #128]	@ (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d001      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e032      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d008      	beq.n	80016ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016dc:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	4916      	ldr	r1, [pc, #88]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d009      	beq.n	800170e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016fa:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	490e      	ldr	r1, [pc, #56]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	4313      	orrs	r3, r2
 800170c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800170e:	f000 f821 	bl	8001754 <HAL_RCC_GetSysClockFreq>
 8001712:	4602      	mov	r2, r0
 8001714:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	091b      	lsrs	r3, r3, #4
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	490a      	ldr	r1, [pc, #40]	@ (8001748 <HAL_RCC_ClockConfig+0x1c0>)
 8001720:	5ccb      	ldrb	r3, [r1, r3]
 8001722:	fa22 f303 	lsr.w	r3, r2, r3
 8001726:	4a09      	ldr	r2, [pc, #36]	@ (800174c <HAL_RCC_ClockConfig+0x1c4>)
 8001728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800172a:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <HAL_RCC_ClockConfig+0x1c8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff f9a2 	bl	8000a78 <HAL_InitTick>

  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023c00 	.word	0x40023c00
 8001744:	40023800 	.word	0x40023800
 8001748:	08003d2c 	.word	0x08003d2c
 800174c:	20000000 	.word	0x20000000
 8001750:	20000004 	.word	0x20000004

08001754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001758:	b094      	sub	sp, #80	@ 0x50
 800175a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001760:	2300      	movs	r3, #0
 8001762:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001764:	2300      	movs	r3, #0
 8001766:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800176c:	4b79      	ldr	r3, [pc, #484]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x200>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 030c 	and.w	r3, r3, #12
 8001774:	2b08      	cmp	r3, #8
 8001776:	d00d      	beq.n	8001794 <HAL_RCC_GetSysClockFreq+0x40>
 8001778:	2b08      	cmp	r3, #8
 800177a:	f200 80e1 	bhi.w	8001940 <HAL_RCC_GetSysClockFreq+0x1ec>
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <HAL_RCC_GetSysClockFreq+0x34>
 8001782:	2b04      	cmp	r3, #4
 8001784:	d003      	beq.n	800178e <HAL_RCC_GetSysClockFreq+0x3a>
 8001786:	e0db      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001788:	4b73      	ldr	r3, [pc, #460]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x204>)
 800178a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800178c:	e0db      	b.n	8001946 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800178e:	4b73      	ldr	r3, [pc, #460]	@ (800195c <HAL_RCC_GetSysClockFreq+0x208>)
 8001790:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001792:	e0d8      	b.n	8001946 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001794:	4b6f      	ldr	r3, [pc, #444]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x200>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800179c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800179e:	4b6d      	ldr	r3, [pc, #436]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x200>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d063      	beq.n	8001872 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x200>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	099b      	lsrs	r3, r3, #6
 80017b0:	2200      	movs	r2, #0
 80017b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80017b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80017be:	2300      	movs	r3, #0
 80017c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80017c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80017c6:	4622      	mov	r2, r4
 80017c8:	462b      	mov	r3, r5
 80017ca:	f04f 0000 	mov.w	r0, #0
 80017ce:	f04f 0100 	mov.w	r1, #0
 80017d2:	0159      	lsls	r1, r3, #5
 80017d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017d8:	0150      	lsls	r0, r2, #5
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4621      	mov	r1, r4
 80017e0:	1a51      	subs	r1, r2, r1
 80017e2:	6139      	str	r1, [r7, #16]
 80017e4:	4629      	mov	r1, r5
 80017e6:	eb63 0301 	sbc.w	r3, r3, r1
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017f8:	4659      	mov	r1, fp
 80017fa:	018b      	lsls	r3, r1, #6
 80017fc:	4651      	mov	r1, sl
 80017fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001802:	4651      	mov	r1, sl
 8001804:	018a      	lsls	r2, r1, #6
 8001806:	4651      	mov	r1, sl
 8001808:	ebb2 0801 	subs.w	r8, r2, r1
 800180c:	4659      	mov	r1, fp
 800180e:	eb63 0901 	sbc.w	r9, r3, r1
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800181e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001822:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001826:	4690      	mov	r8, r2
 8001828:	4699      	mov	r9, r3
 800182a:	4623      	mov	r3, r4
 800182c:	eb18 0303 	adds.w	r3, r8, r3
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	462b      	mov	r3, r5
 8001834:	eb49 0303 	adc.w	r3, r9, r3
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001846:	4629      	mov	r1, r5
 8001848:	024b      	lsls	r3, r1, #9
 800184a:	4621      	mov	r1, r4
 800184c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001850:	4621      	mov	r1, r4
 8001852:	024a      	lsls	r2, r1, #9
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800185a:	2200      	movs	r2, #0
 800185c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800185e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001860:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001864:	f7fe fcb6 	bl	80001d4 <__aeabi_uldivmod>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4613      	mov	r3, r2
 800186e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001870:	e058      	b.n	8001924 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001872:	4b38      	ldr	r3, [pc, #224]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x200>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	099b      	lsrs	r3, r3, #6
 8001878:	2200      	movs	r2, #0
 800187a:	4618      	mov	r0, r3
 800187c:	4611      	mov	r1, r2
 800187e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001882:	623b      	str	r3, [r7, #32]
 8001884:	2300      	movs	r3, #0
 8001886:	627b      	str	r3, [r7, #36]	@ 0x24
 8001888:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800188c:	4642      	mov	r2, r8
 800188e:	464b      	mov	r3, r9
 8001890:	f04f 0000 	mov.w	r0, #0
 8001894:	f04f 0100 	mov.w	r1, #0
 8001898:	0159      	lsls	r1, r3, #5
 800189a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800189e:	0150      	lsls	r0, r2, #5
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4641      	mov	r1, r8
 80018a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80018aa:	4649      	mov	r1, r9
 80018ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	f04f 0300 	mov.w	r3, #0
 80018b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018c4:	ebb2 040a 	subs.w	r4, r2, sl
 80018c8:	eb63 050b 	sbc.w	r5, r3, fp
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	00eb      	lsls	r3, r5, #3
 80018d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018da:	00e2      	lsls	r2, r4, #3
 80018dc:	4614      	mov	r4, r2
 80018de:	461d      	mov	r5, r3
 80018e0:	4643      	mov	r3, r8
 80018e2:	18e3      	adds	r3, r4, r3
 80018e4:	603b      	str	r3, [r7, #0]
 80018e6:	464b      	mov	r3, r9
 80018e8:	eb45 0303 	adc.w	r3, r5, r3
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018fa:	4629      	mov	r1, r5
 80018fc:	028b      	lsls	r3, r1, #10
 80018fe:	4621      	mov	r1, r4
 8001900:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001904:	4621      	mov	r1, r4
 8001906:	028a      	lsls	r2, r1, #10
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800190e:	2200      	movs	r2, #0
 8001910:	61bb      	str	r3, [r7, #24]
 8001912:	61fa      	str	r2, [r7, #28]
 8001914:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001918:	f7fe fc5c 	bl	80001d4 <__aeabi_uldivmod>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4613      	mov	r3, r2
 8001922:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001924:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x200>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	0c1b      	lsrs	r3, r3, #16
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	3301      	adds	r3, #1
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001934:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001936:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001938:	fbb2 f3f3 	udiv	r3, r2, r3
 800193c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800193e:	e002      	b.n	8001946 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001940:	4b05      	ldr	r3, [pc, #20]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x204>)
 8001942:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001944:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001946:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001948:	4618      	mov	r0, r3
 800194a:	3750      	adds	r7, #80	@ 0x50
 800194c:	46bd      	mov	sp, r7
 800194e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800
 8001958:	00f42400 	.word	0x00f42400
 800195c:	007a1200 	.word	0x007a1200

08001960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001964:	4b03      	ldr	r3, [pc, #12]	@ (8001974 <HAL_RCC_GetHCLKFreq+0x14>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000000 	.word	0x20000000

08001978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800197c:	f7ff fff0 	bl	8001960 <HAL_RCC_GetHCLKFreq>
 8001980:	4602      	mov	r2, r0
 8001982:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	0a9b      	lsrs	r3, r3, #10
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	4903      	ldr	r1, [pc, #12]	@ (800199c <HAL_RCC_GetPCLK1Freq+0x24>)
 800198e:	5ccb      	ldrb	r3, [r1, r3]
 8001990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001994:	4618      	mov	r0, r3
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40023800 	.word	0x40023800
 800199c:	08003d3c 	.word	0x08003d3c

080019a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019a4:	f7ff ffdc 	bl	8001960 <HAL_RCC_GetHCLKFreq>
 80019a8:	4602      	mov	r2, r0
 80019aa:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	0b5b      	lsrs	r3, r3, #13
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	4903      	ldr	r1, [pc, #12]	@ (80019c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019b6:	5ccb      	ldrb	r3, [r1, r3]
 80019b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019bc:	4618      	mov	r0, r3
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40023800 	.word	0x40023800
 80019c4:	08003d3c 	.word	0x08003d3c

080019c8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e022      	b.n	8001a20 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d105      	bne.n	80019f2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7fe ff05 	bl	80007fc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2203      	movs	r2, #3
 80019f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f814 	bl	8001a28 <HAL_SD_InitCard>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e00a      	b.n	8001a20 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001a28:	b5b0      	push	{r4, r5, r7, lr}
 8001a2a:	b08e      	sub	sp, #56	@ 0x38
 8001a2c:	af04      	add	r7, sp, #16
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001a44:	2376      	movs	r3, #118	@ 0x76
 8001a46:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681d      	ldr	r5, [r3, #0]
 8001a4c:	466c      	mov	r4, sp
 8001a4e:	f107 0314 	add.w	r3, r7, #20
 8001a52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a5a:	f107 0308 	add.w	r3, r7, #8
 8001a5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a60:	4628      	mov	r0, r5
 8001a62:	f001 fa0d 	bl	8002e80 <SDIO_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8001a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e04f      	b.n	8001b18 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8001a78:	4b29      	ldr	r3, [pc, #164]	@ (8001b20 <HAL_SD_InitCard+0xf8>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f001 fa45 	bl	8002f12 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001a88:	4b25      	ldr	r3, [pc, #148]	@ (8001b20 <HAL_SD_InitCard+0xf8>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8001a8e:	2002      	movs	r0, #2
 8001a90:	f7ff f842 	bl	8000b18 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 fe79 	bl	800278c <SD_PowerON>
 8001a9a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00b      	beq.n	8001aba <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e02e      	b.n	8001b18 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 fd98 	bl	80025f0 <SD_InitCard>
 8001ac0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00b      	beq.n	8001ae0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e01b      	b.n	8001b18 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f001 faa4 	bl	8003036 <SDMMC_CmdBlockLength>
 8001aee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00f      	beq.n	8001b16 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a0a      	ldr	r2, [pc, #40]	@ (8001b24 <HAL_SD_InitCard+0xfc>)
 8001afc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	431a      	orrs	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3728      	adds	r7, #40	@ 0x28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b20:	422580a0 	.word	0x422580a0
 8001b24:	004005ff 	.word	0x004005ff

08001b28 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b092      	sub	sp, #72	@ 0x48
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
 8001b34:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001b36:	f7fe ffe3 	bl	8000b00 <HAL_GetTick>
 8001b3a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d107      	bne.n	8001b5a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b4e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e1c5      	b.n	8001ee6 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	f040 81b8 	bne.w	8001ed8 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001b6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	441a      	add	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d907      	bls.n	8001b8c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b80:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e1ac      	b.n	8001ee6 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2203      	movs	r2, #3
 8001b90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d002      	beq.n	8001baa <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8001ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ba6:	025b      	lsls	r3, r3, #9
 8001ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bae:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	025b      	lsls	r3, r3, #9
 8001bb4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001bb6:	2390      	movs	r3, #144	@ 0x90
 8001bb8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f107 0214 	add.w	r2, r7, #20
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f001 fa04 	bl	8002fde <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d90a      	bls.n	8001bf2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2202      	movs	r2, #2
 8001be0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001be8:	4618      	mov	r0, r3
 8001bea:	f001 fa68 	bl	80030be <SDMMC_CmdReadMultiBlock>
 8001bee:	6478      	str	r0, [r7, #68]	@ 0x44
 8001bf0:	e009      	b.n	8001c06 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f001 fa3b 	bl	800307a <SDMMC_CmdReadSingleBlock>
 8001c04:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001c06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d012      	beq.n	8001c32 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a7e      	ldr	r2, [pc, #504]	@ (8001e0c <HAL_SD_ReadBlocks+0x2e4>)
 8001c12:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e159      	b.n	8001ee6 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001c36:	e061      	b.n	8001cfc <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d03c      	beq.n	8001cc0 <HAL_SD_ReadBlocks+0x198>
 8001c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d039      	beq.n	8001cc0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001c50:	e033      	b.n	8001cba <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f001 f93d 	bl	8002ed6 <SDIO_ReadFIFO>
 8001c5c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8001c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c64:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c68:	3301      	adds	r3, #1
 8001c6a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8001c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c7a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c7e:	3301      	adds	r3, #1
 8001c80:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8001c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c84:	3b01      	subs	r3, #1
 8001c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c8a:	0c1b      	lsrs	r3, r3, #16
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c90:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c94:	3301      	adds	r3, #1
 8001c96:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8001c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ca0:	0e1b      	lsrs	r3, r3, #24
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ca6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001caa:	3301      	adds	r3, #1
 8001cac:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8001cae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8001cb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8001cba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cbc:	2b07      	cmp	r3, #7
 8001cbe:	d9c8      	bls.n	8001c52 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001cc0:	f7fe ff1e 	bl	8000b00 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d902      	bls.n	8001cd6 <HAL_SD_ReadBlocks+0x1ae>
 8001cd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d112      	bne.n	8001cfc <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a4c      	ldr	r2, [pc, #304]	@ (8001e0c <HAL_SD_ReadBlocks+0x2e4>)
 8001cdc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ce2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e0f4      	b.n	8001ee6 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d02:	f240 332a 	movw	r3, #810	@ 0x32a
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d095      	beq.n	8001c38 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d022      	beq.n	8001d60 <HAL_SD_ReadBlocks+0x238>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d91f      	bls.n	8001d60 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d01b      	beq.n	8001d60 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f001 fa2d 	bl	800318c <SDMMC_CmdStopTransfer>
 8001d32:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8001d34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d012      	beq.n	8001d60 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a33      	ldr	r2, [pc, #204]	@ (8001e0c <HAL_SD_ReadBlocks+0x2e4>)
 8001d40:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0c2      	b.n	8001ee6 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d106      	bne.n	8001d7c <HAL_SD_ReadBlocks+0x254>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d012      	beq.n	8001da2 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a22      	ldr	r2, [pc, #136]	@ (8001e0c <HAL_SD_ReadBlocks+0x2e4>)
 8001d82:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d88:	f043 0208 	orr.w	r2, r3, #8
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e0a1      	b.n	8001ee6 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d012      	beq.n	8001dd6 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a15      	ldr	r2, [pc, #84]	@ (8001e0c <HAL_SD_ReadBlocks+0x2e4>)
 8001db6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dbc:	f043 0202 	orr.w	r2, r3, #2
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e087      	b.n	8001ee6 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ddc:	f003 0320 	and.w	r3, r3, #32
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d064      	beq.n	8001eae <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a08      	ldr	r2, [pc, #32]	@ (8001e0c <HAL_SD_ReadBlocks+0x2e4>)
 8001dea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001df0:	f043 0220 	orr.w	r2, r3, #32
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e06d      	b.n	8001ee6 <HAL_SD_ReadBlocks+0x3be>
 8001e0a:	bf00      	nop
 8001e0c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f001 f85e 	bl	8002ed6 <SDIO_ReadFIFO>
 8001e1a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8001e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e22:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e26:	3301      	adds	r3, #1
 8001e28:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8001e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e32:	0a1b      	lsrs	r3, r3, #8
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e38:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8001e40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e42:	3b01      	subs	r3, #1
 8001e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e48:	0c1b      	lsrs	r3, r3, #16
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e4e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e52:	3301      	adds	r3, #1
 8001e54:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8001e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e5e:	0e1b      	lsrs	r3, r3, #24
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e64:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e68:	3301      	adds	r3, #1
 8001e6a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8001e6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001e72:	f7fe fe45 	bl	8000b00 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d902      	bls.n	8001e88 <HAL_SD_ReadBlocks+0x360>
 8001e82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d112      	bne.n	8001eae <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a18      	ldr	r2, [pc, #96]	@ (8001ef0 <HAL_SD_ReadBlocks+0x3c8>)
 8001e8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e94:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e01b      	b.n	8001ee6 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d002      	beq.n	8001ec2 <HAL_SD_ReadBlocks+0x39a>
 8001ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1a6      	bne.n	8001e10 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f240 523a 	movw	r2, #1338	@ 0x53a
 8001eca:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	e006      	b.n	8001ee6 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001edc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
  }
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3748      	adds	r7, #72	@ 0x48
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	004005ff 	.word	0x004005ff

08001ef4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b092      	sub	sp, #72	@ 0x48
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
 8001f00:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001f02:	f7fe fdfd 	bl	8000b00 <HAL_GetTick>
 8001f06:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d107      	bne.n	8001f26 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f1a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e16d      	b.n	8002202 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	f040 8160 	bne.w	80021f4 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001f3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	441a      	add	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d907      	bls.n	8001f58 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f4c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e154      	b.n	8002202 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2200      	movs	r2, #0
 8001f66:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d002      	beq.n	8001f76 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8001f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f72:	025b      	lsls	r3, r3, #9
 8001f74:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f7a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	025b      	lsls	r3, r3, #9
 8001f80:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001f82:	2390      	movs	r3, #144	@ 0x90
 8001f84:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8001f86:	2300      	movs	r3, #0
 8001f88:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f107 0218 	add.w	r2, r7, #24
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f001 f81e 	bl	8002fde <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d90a      	bls.n	8001fbe <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2220      	movs	r2, #32
 8001fac:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f001 f8c6 	bl	8003146 <SDMMC_CmdWriteMultiBlock>
 8001fba:	6478      	str	r0, [r7, #68]	@ 0x44
 8001fbc:	e009      	b.n	8001fd2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2210      	movs	r2, #16
 8001fc2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f001 f899 	bl	8003102 <SDMMC_CmdWriteSingleBlock>
 8001fd0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001fd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d012      	beq.n	8001ffe <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a8b      	ldr	r2, [pc, #556]	@ (800220c <HAL_SD_WriteBlocks+0x318>)
 8001fde:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001fe4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e101      	b.n	8002202 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002002:	e065      	b.n	80020d0 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800200a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d040      	beq.n	8002094 <HAL_SD_WriteBlocks+0x1a0>
 8002012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002014:	2b00      	cmp	r3, #0
 8002016:	d03d      	beq.n	8002094 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002018:	2300      	movs	r3, #0
 800201a:	643b      	str	r3, [r7, #64]	@ 0x40
 800201c:	e037      	b.n	800208e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800201e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002026:	3301      	adds	r3, #1
 8002028:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800202a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800202c:	3b01      	subs	r3, #1
 800202e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	021a      	lsls	r2, r3, #8
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	4313      	orrs	r3, r2
 800203a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800203c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800203e:	3301      	adds	r3, #1
 8002040:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002044:	3b01      	subs	r3, #1
 8002046:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	041a      	lsls	r2, r3, #16
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	4313      	orrs	r3, r2
 8002052:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002056:	3301      	adds	r3, #1
 8002058:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800205a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800205c:	3b01      	subs	r3, #1
 800205e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	061a      	lsls	r2, r3, #24
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	4313      	orrs	r3, r2
 800206a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800206c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800206e:	3301      	adds	r3, #1
 8002070:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002074:	3b01      	subs	r3, #1
 8002076:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f107 0214 	add.w	r2, r7, #20
 8002080:	4611      	mov	r1, r2
 8002082:	4618      	mov	r0, r3
 8002084:	f000 ff34 	bl	8002ef0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800208a:	3301      	adds	r3, #1
 800208c:	643b      	str	r3, [r7, #64]	@ 0x40
 800208e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002090:	2b07      	cmp	r3, #7
 8002092:	d9c4      	bls.n	800201e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002094:	f7fe fd34 	bl	8000b00 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d902      	bls.n	80020aa <HAL_SD_WriteBlocks+0x1b6>
 80020a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d112      	bne.n	80020d0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a57      	ldr	r2, [pc, #348]	@ (800220c <HAL_SD_WriteBlocks+0x318>)
 80020b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020b8:	431a      	orrs	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e098      	b.n	8002202 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020d6:	f240 331a 	movw	r3, #794	@ 0x31a
 80020da:	4013      	ands	r3, r2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d091      	beq.n	8002004 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d022      	beq.n	8002134 <HAL_SD_WriteBlocks+0x240>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d91f      	bls.n	8002134 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d01b      	beq.n	8002134 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f001 f843 	bl	800318c <SDMMC_CmdStopTransfer>
 8002106:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002108:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800210a:	2b00      	cmp	r3, #0
 800210c:	d012      	beq.n	8002134 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a3e      	ldr	r2, [pc, #248]	@ (800220c <HAL_SD_WriteBlocks+0x318>)
 8002114:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800211a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800211c:	431a      	orrs	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e066      	b.n	8002202 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d106      	bne.n	8002150 <HAL_SD_WriteBlocks+0x25c>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002148:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800214c:	2b00      	cmp	r3, #0
 800214e:	d012      	beq.n	8002176 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a2d      	ldr	r2, [pc, #180]	@ (800220c <HAL_SD_WriteBlocks+0x318>)
 8002156:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800215c:	f043 0208 	orr.w	r2, r3, #8
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e045      	b.n	8002202 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d012      	beq.n	80021aa <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a20      	ldr	r2, [pc, #128]	@ (800220c <HAL_SD_WriteBlocks+0x318>)
 800218a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002190:	f043 0202 	orr.w	r2, r3, #2
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e02b      	b.n	8002202 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021b0:	f003 0310 	and.w	r3, r3, #16
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d012      	beq.n	80021de <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a13      	ldr	r2, [pc, #76]	@ (800220c <HAL_SD_WriteBlocks+0x318>)
 80021be:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021c4:	f043 0210 	orr.w	r2, r3, #16
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e011      	b.n	8002202 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f240 523a 	movw	r2, #1338	@ 0x53a
 80021e6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	e006      	b.n	8002202 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021f8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
  }
}
 8002202:	4618      	mov	r0, r3
 8002204:	3748      	adds	r7, #72	@ 0x48
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	004005ff 	.word	0x004005ff

08002210 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800221e:	0f9b      	lsrs	r3, r3, #30
 8002220:	b2da      	uxtb	r2, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800222a:	0e9b      	lsrs	r3, r3, #26
 800222c:	b2db      	uxtb	r3, r3
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	b2da      	uxtb	r2, r3
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800223c:	0e1b      	lsrs	r3, r3, #24
 800223e:	b2db      	uxtb	r3, r3
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	b2da      	uxtb	r2, r3
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800224e:	0c1b      	lsrs	r3, r3, #16
 8002250:	b2da      	uxtb	r2, r3
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	b2da      	uxtb	r2, r3
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002266:	b2da      	uxtb	r2, r3
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002270:	0d1b      	lsrs	r3, r3, #20
 8002272:	b29a      	uxth	r2, r3
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800227c:	0c1b      	lsrs	r3, r3, #16
 800227e:	b2db      	uxtb	r3, r3
 8002280:	f003 030f 	and.w	r3, r3, #15
 8002284:	b2da      	uxtb	r2, r3
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800228e:	0bdb      	lsrs	r3, r3, #15
 8002290:	b2db      	uxtb	r3, r3
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	b2da      	uxtb	r2, r3
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022a0:	0b9b      	lsrs	r3, r3, #14
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022b2:	0b5b      	lsrs	r3, r3, #13
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022c4:	0b1b      	lsrs	r3, r3, #12
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2200      	movs	r2, #0
 80022d6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d163      	bne.n	80023a8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022e4:	009a      	lsls	r2, r3, #2
 80022e6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80022ea:	4013      	ands	r3, r2
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80022f0:	0f92      	lsrs	r2, r2, #30
 80022f2:	431a      	orrs	r2, r3
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022fc:	0edb      	lsrs	r3, r3, #27
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	b2da      	uxtb	r2, r3
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800230e:	0e1b      	lsrs	r3, r3, #24
 8002310:	b2db      	uxtb	r3, r3
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	b2da      	uxtb	r2, r3
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002320:	0d5b      	lsrs	r3, r3, #21
 8002322:	b2db      	uxtb	r3, r3
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	b2da      	uxtb	r2, r3
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002332:	0c9b      	lsrs	r3, r3, #18
 8002334:	b2db      	uxtb	r3, r3
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	b2da      	uxtb	r2, r3
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002344:	0bdb      	lsrs	r3, r3, #15
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	b2da      	uxtb	r2, r3
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	7e1b      	ldrb	r3, [r3, #24]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	3302      	adds	r3, #2
 8002368:	2201      	movs	r2, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002372:	fb03 f202 	mul.w	r2, r3, r2
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	7a1b      	ldrb	r3, [r3, #8]
 800237e:	b2db      	uxtb	r3, r3
 8002380:	f003 030f 	and.w	r3, r3, #15
 8002384:	2201      	movs	r2, #1
 8002386:	409a      	lsls	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002394:	0a52      	lsrs	r2, r2, #9
 8002396:	fb03 f202 	mul.w	r2, r3, r2
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023a4:	661a      	str	r2, [r3, #96]	@ 0x60
 80023a6:	e031      	b.n	800240c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d11d      	bne.n	80023ec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023b4:	041b      	lsls	r3, r3, #16
 80023b6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023be:	0c1b      	lsrs	r3, r3, #16
 80023c0:	431a      	orrs	r2, r3
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	3301      	adds	r3, #1
 80023cc:	029a      	lsls	r2, r3, #10
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023e0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	661a      	str	r2, [r3, #96]	@ 0x60
 80023ea:	e00f      	b.n	800240c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a58      	ldr	r2, [pc, #352]	@ (8002554 <HAL_SD_GetCardCSD+0x344>)
 80023f2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e09d      	b.n	8002548 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002410:	0b9b      	lsrs	r3, r3, #14
 8002412:	b2db      	uxtb	r3, r3
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	b2da      	uxtb	r2, r3
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002422:	09db      	lsrs	r3, r3, #7
 8002424:	b2db      	uxtb	r3, r3
 8002426:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800242a:	b2da      	uxtb	r2, r3
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002434:	b2db      	uxtb	r3, r3
 8002436:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800243a:	b2da      	uxtb	r2, r3
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002444:	0fdb      	lsrs	r3, r3, #31
 8002446:	b2da      	uxtb	r2, r3
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002450:	0f5b      	lsrs	r3, r3, #29
 8002452:	b2db      	uxtb	r3, r3
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	b2da      	uxtb	r2, r3
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002462:	0e9b      	lsrs	r3, r3, #26
 8002464:	b2db      	uxtb	r3, r3
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	b2da      	uxtb	r2, r3
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002474:	0d9b      	lsrs	r3, r3, #22
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	b2da      	uxtb	r2, r3
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002486:	0d5b      	lsrs	r3, r3, #21
 8002488:	b2db      	uxtb	r3, r3
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	b2da      	uxtb	r2, r3
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024a2:	0c1b      	lsrs	r3, r3, #16
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b6:	0bdb      	lsrs	r3, r3, #15
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ca:	0b9b      	lsrs	r3, r3, #14
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024de:	0b5b      	lsrs	r3, r3, #13
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f2:	0b1b      	lsrs	r3, r3, #12
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002506:	0a9b      	lsrs	r3, r3, #10
 8002508:	b2db      	uxtb	r3, r3
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	b2da      	uxtb	r2, r3
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800251a:	0a1b      	lsrs	r3, r3, #8
 800251c:	b2db      	uxtb	r3, r3
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	b2da      	uxtb	r2, r3
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800252e:	085b      	lsrs	r3, r3, #1
 8002530:	b2db      	uxtb	r3, r3
 8002532:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002536:	b2da      	uxtb	r2, r3
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	004005ff 	.word	0x004005ff

08002558 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80025bc:	f107 030c 	add.w	r3, r7, #12
 80025c0:	4619      	mov	r1, r3
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f970 	bl	80028a8 <SD_SendStatus>
 80025c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	0a5b      	lsrs	r3, r3, #9
 80025e0:	f003 030f 	and.w	r3, r3, #15
 80025e4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80025e6:	693b      	ldr	r3, [r7, #16]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80025f0:	b5b0      	push	{r4, r5, r7, lr}
 80025f2:	b094      	sub	sp, #80	@ 0x50
 80025f4:	af04      	add	r7, sp, #16
 80025f6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80025f8:	2301      	movs	r3, #1
 80025fa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f000 fc94 	bl	8002f2e <SDIO_GetPowerState>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d102      	bne.n	8002612 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800260c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002610:	e0b8      	b.n	8002784 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002616:	2b03      	cmp	r3, #3
 8002618:	d02f      	beq.n	800267a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fe7b 	bl	800331a <SDMMC_CmdSendCID>
 8002624:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <SD_InitCard+0x40>
    {
      return errorstate;
 800262c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800262e:	e0a9      	b.n	8002784 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2100      	movs	r1, #0
 8002636:	4618      	mov	r0, r3
 8002638:	f000 fcbe 	bl	8002fb8 <SDIO_GetResponse>
 800263c:	4602      	mov	r2, r0
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2104      	movs	r1, #4
 8002648:	4618      	mov	r0, r3
 800264a:	f000 fcb5 	bl	8002fb8 <SDIO_GetResponse>
 800264e:	4602      	mov	r2, r0
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2108      	movs	r1, #8
 800265a:	4618      	mov	r0, r3
 800265c:	f000 fcac 	bl	8002fb8 <SDIO_GetResponse>
 8002660:	4602      	mov	r2, r0
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	210c      	movs	r1, #12
 800266c:	4618      	mov	r0, r3
 800266e:	f000 fca3 	bl	8002fb8 <SDIO_GetResponse>
 8002672:	4602      	mov	r2, r0
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267e:	2b03      	cmp	r3, #3
 8002680:	d00d      	beq.n	800269e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f107 020e 	add.w	r2, r7, #14
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f000 fe81 	bl	8003394 <SDMMC_CmdSetRelAdd>
 8002692:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <SD_InitCard+0xae>
    {
      return errorstate;
 800269a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800269c:	e072      	b.n	8002784 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	d036      	beq.n	8002714 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80026a6:	89fb      	ldrh	r3, [r7, #14]
 80026a8:	461a      	mov	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026b6:	041b      	lsls	r3, r3, #16
 80026b8:	4619      	mov	r1, r3
 80026ba:	4610      	mov	r0, r2
 80026bc:	f000 fe4b 	bl	8003356 <SDMMC_CmdSendCSD>
 80026c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80026c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <SD_InitCard+0xdc>
    {
      return errorstate;
 80026c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026ca:	e05b      	b.n	8002784 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2100      	movs	r1, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 fc70 	bl	8002fb8 <SDIO_GetResponse>
 80026d8:	4602      	mov	r2, r0
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2104      	movs	r1, #4
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 fc67 	bl	8002fb8 <SDIO_GetResponse>
 80026ea:	4602      	mov	r2, r0
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2108      	movs	r1, #8
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 fc5e 	bl	8002fb8 <SDIO_GetResponse>
 80026fc:	4602      	mov	r2, r0
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	210c      	movs	r1, #12
 8002708:	4618      	mov	r0, r3
 800270a:	f000 fc55 	bl	8002fb8 <SDIO_GetResponse>
 800270e:	4602      	mov	r2, r0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2104      	movs	r1, #4
 800271a:	4618      	mov	r0, r3
 800271c:	f000 fc4c 	bl	8002fb8 <SDIO_GetResponse>
 8002720:	4603      	mov	r3, r0
 8002722:	0d1a      	lsrs	r2, r3, #20
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002728:	f107 0310 	add.w	r3, r7, #16
 800272c:	4619      	mov	r1, r3
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff fd6e 	bl	8002210 <HAL_SD_GetCardCSD>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800273a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800273e:	e021      	b.n	8002784 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6819      	ldr	r1, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002748:	041b      	lsls	r3, r3, #16
 800274a:	2200      	movs	r2, #0
 800274c:	461c      	mov	r4, r3
 800274e:	4615      	mov	r5, r2
 8002750:	4622      	mov	r2, r4
 8002752:	462b      	mov	r3, r5
 8002754:	4608      	mov	r0, r1
 8002756:	f000 fd3b 	bl	80031d0 <SDMMC_CmdSelDesel>
 800275a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800275c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <SD_InitCard+0x176>
  {
    return errorstate;
 8002762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002764:	e00e      	b.n	8002784 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681d      	ldr	r5, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	466c      	mov	r4, sp
 800276e:	f103 0210 	add.w	r2, r3, #16
 8002772:	ca07      	ldmia	r2, {r0, r1, r2}
 8002774:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002778:	3304      	adds	r3, #4
 800277a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800277c:	4628      	mov	r0, r5
 800277e:	f000 fb7f 	bl	8002e80 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3740      	adds	r7, #64	@ 0x40
 8002788:	46bd      	mov	sp, r7
 800278a:	bdb0      	pop	{r4, r5, r7, pc}

0800278c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	2300      	movs	r3, #0
 800279e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 fd36 	bl	8003216 <SDMMC_CmdGoIdleState>
 80027aa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	e072      	b.n	800289c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 fd49 	bl	8003252 <SDMMC_CmdOperCond>
 80027c0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00d      	beq.n	80027e4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 fd1f 	bl	8003216 <SDMMC_CmdGoIdleState>
 80027d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d004      	beq.n	80027ea <SD_PowerON+0x5e>
    {
      return errorstate;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	e05b      	b.n	800289c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d137      	bne.n	8002862 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2100      	movs	r1, #0
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 fd49 	bl	8003290 <SDMMC_CmdAppCommand>
 80027fe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d02d      	beq.n	8002862 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002806:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800280a:	e047      	b.n	800289c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2100      	movs	r1, #0
 8002812:	4618      	mov	r0, r3
 8002814:	f000 fd3c 	bl	8003290 <SDMMC_CmdAppCommand>
 8002818:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <SD_PowerON+0x98>
    {
      return errorstate;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	e03b      	b.n	800289c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	491e      	ldr	r1, [pc, #120]	@ (80028a4 <SD_PowerON+0x118>)
 800282a:	4618      	mov	r0, r3
 800282c:	f000 fd52 	bl	80032d4 <SDMMC_CmdAppOperCommand>
 8002830:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d002      	beq.n	800283e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002838:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800283c:	e02e      	b.n	800289c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2100      	movs	r1, #0
 8002844:	4618      	mov	r0, r3
 8002846:	f000 fbb7 	bl	8002fb8 <SDIO_GetResponse>
 800284a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	0fdb      	lsrs	r3, r3, #31
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <SD_PowerON+0xcc>
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <SD_PowerON+0xce>
 8002858:	2300      	movs	r3, #0
 800285a:	613b      	str	r3, [r7, #16]

    count++;
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	3301      	adds	r3, #1
 8002860:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002868:	4293      	cmp	r3, r2
 800286a:	d802      	bhi.n	8002872 <SD_PowerON+0xe6>
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0cc      	beq.n	800280c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002878:	4293      	cmp	r3, r2
 800287a:	d902      	bls.n	8002882 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800287c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002880:	e00c      	b.n	800289c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	645a      	str	r2, [r3, #68]	@ 0x44
 8002892:	e002      	b.n	800289a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	c1100000 	.word	0xc1100000

080028a8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d102      	bne.n	80028be <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80028b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80028bc:	e018      	b.n	80028f0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028c6:	041b      	lsls	r3, r3, #16
 80028c8:	4619      	mov	r1, r3
 80028ca:	4610      	mov	r0, r2
 80028cc:	f000 fd83 	bl	80033d6 <SDMMC_CmdSendStatus>
 80028d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <SD_SendStatus+0x34>
  {
    return errorstate;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	e009      	b.n	80028f0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2100      	movs	r1, #0
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 fb68 	bl	8002fb8 <SDIO_GetResponse>
 80028e8:	4602      	mov	r2, r0
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e042      	b.n	8002990 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7fd ffd4 	bl	80008cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2224      	movs	r2, #36	@ 0x24
 8002928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800293a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f82b 	bl	8002998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002950:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695a      	ldr	r2, [r3, #20]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002960:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002970:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2220      	movs	r2, #32
 800297c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800299c:	b0c0      	sub	sp, #256	@ 0x100
 800299e:	af00      	add	r7, sp, #0
 80029a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80029b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b4:	68d9      	ldr	r1, [r3, #12]
 80029b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	ea40 0301 	orr.w	r3, r0, r1
 80029c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	431a      	orrs	r2, r3
 80029d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80029f0:	f021 010c 	bic.w	r1, r1, #12
 80029f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80029fe:	430b      	orrs	r3, r1
 8002a00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a12:	6999      	ldr	r1, [r3, #24]
 8002a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	ea40 0301 	orr.w	r3, r0, r1
 8002a1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	4b8f      	ldr	r3, [pc, #572]	@ (8002c64 <UART_SetConfig+0x2cc>)
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d005      	beq.n	8002a38 <UART_SetConfig+0xa0>
 8002a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	4b8d      	ldr	r3, [pc, #564]	@ (8002c68 <UART_SetConfig+0x2d0>)
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d104      	bne.n	8002a42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a38:	f7fe ffb2 	bl	80019a0 <HAL_RCC_GetPCLK2Freq>
 8002a3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002a40:	e003      	b.n	8002a4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a42:	f7fe ff99 	bl	8001978 <HAL_RCC_GetPCLK1Freq>
 8002a46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a54:	f040 810c 	bne.w	8002c70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002a62:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002a66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002a6a:	4622      	mov	r2, r4
 8002a6c:	462b      	mov	r3, r5
 8002a6e:	1891      	adds	r1, r2, r2
 8002a70:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002a72:	415b      	adcs	r3, r3
 8002a74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	eb12 0801 	adds.w	r8, r2, r1
 8002a80:	4629      	mov	r1, r5
 8002a82:	eb43 0901 	adc.w	r9, r3, r1
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a9a:	4690      	mov	r8, r2
 8002a9c:	4699      	mov	r9, r3
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	eb18 0303 	adds.w	r3, r8, r3
 8002aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002aa8:	462b      	mov	r3, r5
 8002aaa:	eb49 0303 	adc.w	r3, r9, r3
 8002aae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002abe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002ac2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	18db      	adds	r3, r3, r3
 8002aca:	653b      	str	r3, [r7, #80]	@ 0x50
 8002acc:	4613      	mov	r3, r2
 8002ace:	eb42 0303 	adc.w	r3, r2, r3
 8002ad2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ad4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002ad8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002adc:	f7fd fb7a 	bl	80001d4 <__aeabi_uldivmod>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4b61      	ldr	r3, [pc, #388]	@ (8002c6c <UART_SetConfig+0x2d4>)
 8002ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	011c      	lsls	r4, r3, #4
 8002aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002af2:	2200      	movs	r2, #0
 8002af4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002af8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002afc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002b00:	4642      	mov	r2, r8
 8002b02:	464b      	mov	r3, r9
 8002b04:	1891      	adds	r1, r2, r2
 8002b06:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002b08:	415b      	adcs	r3, r3
 8002b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b10:	4641      	mov	r1, r8
 8002b12:	eb12 0a01 	adds.w	sl, r2, r1
 8002b16:	4649      	mov	r1, r9
 8002b18:	eb43 0b01 	adc.w	fp, r3, r1
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b30:	4692      	mov	sl, r2
 8002b32:	469b      	mov	fp, r3
 8002b34:	4643      	mov	r3, r8
 8002b36:	eb1a 0303 	adds.w	r3, sl, r3
 8002b3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b3e:	464b      	mov	r3, r9
 8002b40:	eb4b 0303 	adc.w	r3, fp, r3
 8002b44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b54:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002b58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	18db      	adds	r3, r3, r3
 8002b60:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b62:	4613      	mov	r3, r2
 8002b64:	eb42 0303 	adc.w	r3, r2, r3
 8002b68:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002b72:	f7fd fb2f 	bl	80001d4 <__aeabi_uldivmod>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8002c6c <UART_SetConfig+0x2d4>)
 8002b7e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	2264      	movs	r2, #100	@ 0x64
 8002b86:	fb02 f303 	mul.w	r3, r2, r3
 8002b8a:	1acb      	subs	r3, r1, r3
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002b92:	4b36      	ldr	r3, [pc, #216]	@ (8002c6c <UART_SetConfig+0x2d4>)
 8002b94:	fba3 2302 	umull	r2, r3, r3, r2
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002ba0:	441c      	add	r4, r3
 8002ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002bac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002bb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002bb4:	4642      	mov	r2, r8
 8002bb6:	464b      	mov	r3, r9
 8002bb8:	1891      	adds	r1, r2, r2
 8002bba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002bbc:	415b      	adcs	r3, r3
 8002bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002bc4:	4641      	mov	r1, r8
 8002bc6:	1851      	adds	r1, r2, r1
 8002bc8:	6339      	str	r1, [r7, #48]	@ 0x30
 8002bca:	4649      	mov	r1, r9
 8002bcc:	414b      	adcs	r3, r1
 8002bce:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002bdc:	4659      	mov	r1, fp
 8002bde:	00cb      	lsls	r3, r1, #3
 8002be0:	4651      	mov	r1, sl
 8002be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002be6:	4651      	mov	r1, sl
 8002be8:	00ca      	lsls	r2, r1, #3
 8002bea:	4610      	mov	r0, r2
 8002bec:	4619      	mov	r1, r3
 8002bee:	4603      	mov	r3, r0
 8002bf0:	4642      	mov	r2, r8
 8002bf2:	189b      	adds	r3, r3, r2
 8002bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002bf8:	464b      	mov	r3, r9
 8002bfa:	460a      	mov	r2, r1
 8002bfc:	eb42 0303 	adc.w	r3, r2, r3
 8002c00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c10:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002c14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002c18:	460b      	mov	r3, r1
 8002c1a:	18db      	adds	r3, r3, r3
 8002c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c1e:	4613      	mov	r3, r2
 8002c20:	eb42 0303 	adc.w	r3, r2, r3
 8002c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002c2e:	f7fd fad1 	bl	80001d4 <__aeabi_uldivmod>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4b0d      	ldr	r3, [pc, #52]	@ (8002c6c <UART_SetConfig+0x2d4>)
 8002c38:	fba3 1302 	umull	r1, r3, r3, r2
 8002c3c:	095b      	lsrs	r3, r3, #5
 8002c3e:	2164      	movs	r1, #100	@ 0x64
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	3332      	adds	r3, #50	@ 0x32
 8002c4a:	4a08      	ldr	r2, [pc, #32]	@ (8002c6c <UART_SetConfig+0x2d4>)
 8002c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c50:	095b      	lsrs	r3, r3, #5
 8002c52:	f003 0207 	and.w	r2, r3, #7
 8002c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4422      	add	r2, r4
 8002c5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c60:	e106      	b.n	8002e70 <UART_SetConfig+0x4d8>
 8002c62:	bf00      	nop
 8002c64:	40011000 	.word	0x40011000
 8002c68:	40011400 	.word	0x40011400
 8002c6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c74:	2200      	movs	r2, #0
 8002c76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c7a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002c7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002c82:	4642      	mov	r2, r8
 8002c84:	464b      	mov	r3, r9
 8002c86:	1891      	adds	r1, r2, r2
 8002c88:	6239      	str	r1, [r7, #32]
 8002c8a:	415b      	adcs	r3, r3
 8002c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c92:	4641      	mov	r1, r8
 8002c94:	1854      	adds	r4, r2, r1
 8002c96:	4649      	mov	r1, r9
 8002c98:	eb43 0501 	adc.w	r5, r3, r1
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	00eb      	lsls	r3, r5, #3
 8002ca6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002caa:	00e2      	lsls	r2, r4, #3
 8002cac:	4614      	mov	r4, r2
 8002cae:	461d      	mov	r5, r3
 8002cb0:	4643      	mov	r3, r8
 8002cb2:	18e3      	adds	r3, r4, r3
 8002cb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002cb8:	464b      	mov	r3, r9
 8002cba:	eb45 0303 	adc.w	r3, r5, r3
 8002cbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002cce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002cde:	4629      	mov	r1, r5
 8002ce0:	008b      	lsls	r3, r1, #2
 8002ce2:	4621      	mov	r1, r4
 8002ce4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ce8:	4621      	mov	r1, r4
 8002cea:	008a      	lsls	r2, r1, #2
 8002cec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002cf0:	f7fd fa70 	bl	80001d4 <__aeabi_uldivmod>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4b60      	ldr	r3, [pc, #384]	@ (8002e7c <UART_SetConfig+0x4e4>)
 8002cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8002cfe:	095b      	lsrs	r3, r3, #5
 8002d00:	011c      	lsls	r4, r3, #4
 8002d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d06:	2200      	movs	r2, #0
 8002d08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002d14:	4642      	mov	r2, r8
 8002d16:	464b      	mov	r3, r9
 8002d18:	1891      	adds	r1, r2, r2
 8002d1a:	61b9      	str	r1, [r7, #24]
 8002d1c:	415b      	adcs	r3, r3
 8002d1e:	61fb      	str	r3, [r7, #28]
 8002d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d24:	4641      	mov	r1, r8
 8002d26:	1851      	adds	r1, r2, r1
 8002d28:	6139      	str	r1, [r7, #16]
 8002d2a:	4649      	mov	r1, r9
 8002d2c:	414b      	adcs	r3, r1
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d3c:	4659      	mov	r1, fp
 8002d3e:	00cb      	lsls	r3, r1, #3
 8002d40:	4651      	mov	r1, sl
 8002d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d46:	4651      	mov	r1, sl
 8002d48:	00ca      	lsls	r2, r1, #3
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4603      	mov	r3, r0
 8002d50:	4642      	mov	r2, r8
 8002d52:	189b      	adds	r3, r3, r2
 8002d54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d58:	464b      	mov	r3, r9
 8002d5a:	460a      	mov	r2, r1
 8002d5c:	eb42 0303 	adc.w	r3, r2, r3
 8002d60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002d7c:	4649      	mov	r1, r9
 8002d7e:	008b      	lsls	r3, r1, #2
 8002d80:	4641      	mov	r1, r8
 8002d82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d86:	4641      	mov	r1, r8
 8002d88:	008a      	lsls	r2, r1, #2
 8002d8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002d8e:	f7fd fa21 	bl	80001d4 <__aeabi_uldivmod>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4611      	mov	r1, r2
 8002d98:	4b38      	ldr	r3, [pc, #224]	@ (8002e7c <UART_SetConfig+0x4e4>)
 8002d9a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	2264      	movs	r2, #100	@ 0x64
 8002da2:	fb02 f303 	mul.w	r3, r2, r3
 8002da6:	1acb      	subs	r3, r1, r3
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	3332      	adds	r3, #50	@ 0x32
 8002dac:	4a33      	ldr	r2, [pc, #204]	@ (8002e7c <UART_SetConfig+0x4e4>)
 8002dae:	fba2 2303 	umull	r2, r3, r2, r3
 8002db2:	095b      	lsrs	r3, r3, #5
 8002db4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002db8:	441c      	add	r4, r3
 8002dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	673b      	str	r3, [r7, #112]	@ 0x70
 8002dc2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002dc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002dc8:	4642      	mov	r2, r8
 8002dca:	464b      	mov	r3, r9
 8002dcc:	1891      	adds	r1, r2, r2
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	415b      	adcs	r3, r3
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dd8:	4641      	mov	r1, r8
 8002dda:	1851      	adds	r1, r2, r1
 8002ddc:	6039      	str	r1, [r7, #0]
 8002dde:	4649      	mov	r1, r9
 8002de0:	414b      	adcs	r3, r1
 8002de2:	607b      	str	r3, [r7, #4]
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002df0:	4659      	mov	r1, fp
 8002df2:	00cb      	lsls	r3, r1, #3
 8002df4:	4651      	mov	r1, sl
 8002df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dfa:	4651      	mov	r1, sl
 8002dfc:	00ca      	lsls	r2, r1, #3
 8002dfe:	4610      	mov	r0, r2
 8002e00:	4619      	mov	r1, r3
 8002e02:	4603      	mov	r3, r0
 8002e04:	4642      	mov	r2, r8
 8002e06:	189b      	adds	r3, r3, r2
 8002e08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e0a:	464b      	mov	r3, r9
 8002e0c:	460a      	mov	r2, r1
 8002e0e:	eb42 0303 	adc.w	r3, r2, r3
 8002e12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002e2c:	4649      	mov	r1, r9
 8002e2e:	008b      	lsls	r3, r1, #2
 8002e30:	4641      	mov	r1, r8
 8002e32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e36:	4641      	mov	r1, r8
 8002e38:	008a      	lsls	r2, r1, #2
 8002e3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002e3e:	f7fd f9c9 	bl	80001d4 <__aeabi_uldivmod>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	4b0d      	ldr	r3, [pc, #52]	@ (8002e7c <UART_SetConfig+0x4e4>)
 8002e48:	fba3 1302 	umull	r1, r3, r3, r2
 8002e4c:	095b      	lsrs	r3, r3, #5
 8002e4e:	2164      	movs	r1, #100	@ 0x64
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	3332      	adds	r3, #50	@ 0x32
 8002e5a:	4a08      	ldr	r2, [pc, #32]	@ (8002e7c <UART_SetConfig+0x4e4>)
 8002e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e60:	095b      	lsrs	r3, r3, #5
 8002e62:	f003 020f 	and.w	r2, r3, #15
 8002e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4422      	add	r2, r4
 8002e6e:	609a      	str	r2, [r3, #8]
}
 8002e70:	bf00      	nop
 8002e72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002e76:	46bd      	mov	sp, r7
 8002e78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e7c:	51eb851f 	.word	0x51eb851f

08002e80 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8002e80:	b084      	sub	sp, #16
 8002e82:	b480      	push	{r7}
 8002e84:	b085      	sub	sp, #20
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	f107 001c 	add.w	r0, r7, #28
 8002e8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8002e96:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8002e98:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8002e9a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8002e9e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8002ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8002ea2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8002ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8002ea6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8002ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8002eaa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8002eba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	b004      	add	sp, #16
 8002ed4:	4770      	bx	lr

08002ed6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b085      	sub	sp, #20
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002f54:	2300      	movs	r3, #0
 8002f56:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002f68:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8002f6e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8002f74:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002f84:	f023 030f 	bic.w	r3, r3, #15
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	b2db      	uxtb	r3, r3
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3314      	adds	r3, #20
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	4413      	add	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
}  
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b085      	sub	sp, #20
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003004:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800300a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003010:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	4313      	orrs	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8003028:	2300      	movs	r3, #0

}
 800302a:	4618      	mov	r0, r3
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b088      	sub	sp, #32
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003044:	2310      	movs	r3, #16
 8003046:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003048:	2340      	movs	r3, #64	@ 0x40
 800304a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003050:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003054:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003056:	f107 0308 	add.w	r3, r7, #8
 800305a:	4619      	mov	r1, r3
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7ff ff74 	bl	8002f4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003066:	2110      	movs	r1, #16
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f9d7 	bl	800341c <SDMMC_GetCmdResp1>
 800306e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003070:	69fb      	ldr	r3, [r7, #28]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3720      	adds	r7, #32
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b088      	sub	sp, #32
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
 8003082:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003088:	2311      	movs	r3, #17
 800308a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800308c:	2340      	movs	r3, #64	@ 0x40
 800308e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003090:	2300      	movs	r3, #0
 8003092:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003094:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003098:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800309a:	f107 0308 	add.w	r3, r7, #8
 800309e:	4619      	mov	r1, r3
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff ff52 	bl	8002f4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80030a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030aa:	2111      	movs	r1, #17
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f9b5 	bl	800341c <SDMMC_GetCmdResp1>
 80030b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80030b4:	69fb      	ldr	r3, [r7, #28]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3720      	adds	r7, #32
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b088      	sub	sp, #32
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80030cc:	2312      	movs	r3, #18
 80030ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80030d0:	2340      	movs	r3, #64	@ 0x40
 80030d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80030d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80030de:	f107 0308 	add.w	r3, r7, #8
 80030e2:	4619      	mov	r1, r3
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7ff ff30 	bl	8002f4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80030ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ee:	2112      	movs	r1, #18
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f993 	bl	800341c <SDMMC_GetCmdResp1>
 80030f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80030f8:	69fb      	ldr	r3, [r7, #28]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3720      	adds	r7, #32
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b088      	sub	sp, #32
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003110:	2318      	movs	r3, #24
 8003112:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003114:	2340      	movs	r3, #64	@ 0x40
 8003116:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800311c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003120:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003122:	f107 0308 	add.w	r3, r7, #8
 8003126:	4619      	mov	r1, r3
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff ff0e 	bl	8002f4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800312e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003132:	2118      	movs	r1, #24
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f971 	bl	800341c <SDMMC_GetCmdResp1>
 800313a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800313c:	69fb      	ldr	r3, [r7, #28]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3720      	adds	r7, #32
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b088      	sub	sp, #32
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003154:	2319      	movs	r3, #25
 8003156:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003158:	2340      	movs	r3, #64	@ 0x40
 800315a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003160:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003164:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003166:	f107 0308 	add.w	r3, r7, #8
 800316a:	4619      	mov	r1, r3
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7ff feec 	bl	8002f4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003176:	2119      	movs	r1, #25
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f94f 	bl	800341c <SDMMC_GetCmdResp1>
 800317e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003180:	69fb      	ldr	r3, [r7, #28]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3720      	adds	r7, #32
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
	...

0800318c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b088      	sub	sp, #32
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003198:	230c      	movs	r3, #12
 800319a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800319c:	2340      	movs	r3, #64	@ 0x40
 800319e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80031a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80031aa:	f107 0308 	add.w	r3, r7, #8
 80031ae:	4619      	mov	r1, r3
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7ff feca 	bl	8002f4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80031b6:	4a05      	ldr	r2, [pc, #20]	@ (80031cc <SDMMC_CmdStopTransfer+0x40>)
 80031b8:	210c      	movs	r1, #12
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f92e 	bl	800341c <SDMMC_GetCmdResp1>
 80031c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80031c2:	69fb      	ldr	r3, [r7, #28]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3720      	adds	r7, #32
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	05f5e100 	.word	0x05f5e100

080031d0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08a      	sub	sp, #40	@ 0x28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80031e0:	2307      	movs	r3, #7
 80031e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80031e4:	2340      	movs	r3, #64	@ 0x40
 80031e6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80031ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031f0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80031f2:	f107 0310 	add.w	r3, r7, #16
 80031f6:	4619      	mov	r1, r3
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f7ff fea6 	bl	8002f4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80031fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003202:	2107      	movs	r1, #7
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 f909 	bl	800341c <SDMMC_GetCmdResp1>
 800320a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800320c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800320e:	4618      	mov	r0, r3
 8003210:	3728      	adds	r7, #40	@ 0x28
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b088      	sub	sp, #32
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003222:	2300      	movs	r3, #0
 8003224:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003226:	2300      	movs	r3, #0
 8003228:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800322a:	2300      	movs	r3, #0
 800322c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800322e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003232:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003234:	f107 0308 	add.w	r3, r7, #8
 8003238:	4619      	mov	r1, r3
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff fe85 	bl	8002f4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 fb23 	bl	800388c <SDMMC_GetCmdError>
 8003246:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003248:	69fb      	ldr	r3, [r7, #28]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3720      	adds	r7, #32
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b088      	sub	sp, #32
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800325a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800325e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003260:	2308      	movs	r3, #8
 8003262:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003264:	2340      	movs	r3, #64	@ 0x40
 8003266:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800326c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003270:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003272:	f107 0308 	add.w	r3, r7, #8
 8003276:	4619      	mov	r1, r3
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff fe66 	bl	8002f4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 fab6 	bl	80037f0 <SDMMC_GetCmdResp7>
 8003284:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003286:	69fb      	ldr	r3, [r7, #28]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3720      	adds	r7, #32
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800329e:	2337      	movs	r3, #55	@ 0x37
 80032a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80032a2:	2340      	movs	r3, #64	@ 0x40
 80032a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80032aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80032b0:	f107 0308 	add.w	r3, r7, #8
 80032b4:	4619      	mov	r1, r3
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff fe47 	bl	8002f4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80032bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032c0:	2137      	movs	r1, #55	@ 0x37
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f8aa 	bl	800341c <SDMMC_GetCmdResp1>
 80032c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80032ca:	69fb      	ldr	r3, [r7, #28]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3720      	adds	r7, #32
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80032e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80032ea:	2329      	movs	r3, #41	@ 0x29
 80032ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80032ee:	2340      	movs	r3, #64	@ 0x40
 80032f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80032f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80032fc:	f107 0308 	add.w	r3, r7, #8
 8003300:	4619      	mov	r1, r3
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff fe21 	bl	8002f4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f9bd 	bl	8003688 <SDMMC_GetCmdResp3>
 800330e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003310:	69fb      	ldr	r3, [r7, #28]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3720      	adds	r7, #32
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b088      	sub	sp, #32
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003326:	2302      	movs	r3, #2
 8003328:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800332a:	23c0      	movs	r3, #192	@ 0xc0
 800332c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003336:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003338:	f107 0308 	add.w	r3, r7, #8
 800333c:	4619      	mov	r1, r3
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff fe03 	bl	8002f4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f957 	bl	80035f8 <SDMMC_GetCmdResp2>
 800334a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800334c:	69fb      	ldr	r3, [r7, #28]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3720      	adds	r7, #32
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b088      	sub	sp, #32
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003364:	2309      	movs	r3, #9
 8003366:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003368:	23c0      	movs	r3, #192	@ 0xc0
 800336a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003370:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003374:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003376:	f107 0308 	add.w	r3, r7, #8
 800337a:	4619      	mov	r1, r3
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff fde4 	bl	8002f4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f938 	bl	80035f8 <SDMMC_GetCmdResp2>
 8003388:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800338a:	69fb      	ldr	r3, [r7, #28]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3720      	adds	r7, #32
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80033a2:	2303      	movs	r3, #3
 80033a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80033a6:	2340      	movs	r3, #64	@ 0x40
 80033a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80033aa:	2300      	movs	r3, #0
 80033ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80033ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80033b4:	f107 0308 	add.w	r3, r7, #8
 80033b8:	4619      	mov	r1, r3
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff fdc5 	bl	8002f4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	2103      	movs	r1, #3
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f99d 	bl	8003704 <SDMMC_GetCmdResp6>
 80033ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80033cc:	69fb      	ldr	r3, [r7, #28]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3720      	adds	r7, #32
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b088      	sub	sp, #32
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
 80033de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80033e4:	230d      	movs	r3, #13
 80033e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80033e8:	2340      	movs	r3, #64	@ 0x40
 80033ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80033f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80033f6:	f107 0308 	add.w	r3, r7, #8
 80033fa:	4619      	mov	r1, r3
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff fda4 	bl	8002f4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003406:	210d      	movs	r1, #13
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f807 	bl	800341c <SDMMC_GetCmdResp1>
 800340e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003410:	69fb      	ldr	r3, [r7, #28]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3720      	adds	r7, #32
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
	...

0800341c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	460b      	mov	r3, r1
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800342a:	4b70      	ldr	r3, [pc, #448]	@ (80035ec <SDMMC_GetCmdResp1+0x1d0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a70      	ldr	r2, [pc, #448]	@ (80035f0 <SDMMC_GetCmdResp1+0x1d4>)
 8003430:	fba2 2303 	umull	r2, r3, r2, r3
 8003434:	0a5a      	lsrs	r2, r3, #9
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	fb02 f303 	mul.w	r3, r2, r3
 800343c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	1e5a      	subs	r2, r3, #1
 8003442:	61fa      	str	r2, [r7, #28]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d102      	bne.n	800344e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003448:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800344c:	e0c9      	b.n	80035e2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003452:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0ef      	beq.n	800343e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1ea      	bne.n	800343e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	d004      	beq.n	800347e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2204      	movs	r2, #4
 8003478:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800347a:	2304      	movs	r3, #4
 800347c:	e0b1      	b.n	80035e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d004      	beq.n	8003494 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2201      	movs	r2, #1
 800348e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003490:	2301      	movs	r3, #1
 8003492:	e0a6      	b.n	80035e2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	22c5      	movs	r2, #197	@ 0xc5
 8003498:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f7ff fd7f 	bl	8002f9e <SDIO_GetCommandResponse>
 80034a0:	4603      	mov	r3, r0
 80034a2:	461a      	mov	r2, r3
 80034a4:	7afb      	ldrb	r3, [r7, #11]
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d001      	beq.n	80034ae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e099      	b.n	80035e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80034ae:	2100      	movs	r1, #0
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f7ff fd81 	bl	8002fb8 <SDIO_GetResponse>
 80034b6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	4b4e      	ldr	r3, [pc, #312]	@ (80035f4 <SDMMC_GetCmdResp1+0x1d8>)
 80034bc:	4013      	ands	r3, r2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80034c2:	2300      	movs	r3, #0
 80034c4:	e08d      	b.n	80035e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	da02      	bge.n	80034d2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80034cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034d0:	e087      	b.n	80035e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80034dc:	2340      	movs	r3, #64	@ 0x40
 80034de:	e080      	b.n	80035e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80034ea:	2380      	movs	r3, #128	@ 0x80
 80034ec:	e079      	b.n	80035e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80034f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034fc:	e071      	b.n	80035e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003508:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800350c:	e069      	b.n	80035e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003518:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800351c:	e061      	b.n	80035e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003528:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800352c:	e059      	b.n	80035e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003538:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800353c:	e051      	b.n	80035e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d002      	beq.n	800354e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003548:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800354c:	e049      	b.n	80035e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003558:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800355c:	e041      	b.n	80035e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d002      	beq.n	800356e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8003568:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800356c:	e039      	b.n	80035e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003578:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800357c:	e031      	b.n	80035e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d002      	beq.n	800358e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003588:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800358c:	e029      	b.n	80035e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003598:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800359c:	e021      	b.n	80035e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80035a8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80035ac:	e019      	b.n	80035e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d002      	beq.n	80035be <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80035b8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80035bc:	e011      	b.n	80035e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80035c8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80035cc:	e009      	b.n	80035e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f003 0308 	and.w	r3, r3, #8
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80035d8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80035dc:	e001      	b.n	80035e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80035de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3720      	adds	r7, #32
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000000 	.word	0x20000000
 80035f0:	10624dd3 	.word	0x10624dd3
 80035f4:	fdffe008 	.word	0xfdffe008

080035f8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003600:	4b1f      	ldr	r3, [pc, #124]	@ (8003680 <SDMMC_GetCmdResp2+0x88>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a1f      	ldr	r2, [pc, #124]	@ (8003684 <SDMMC_GetCmdResp2+0x8c>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	0a5b      	lsrs	r3, r3, #9
 800360c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003610:	fb02 f303 	mul.w	r3, r2, r3
 8003614:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1e5a      	subs	r2, r3, #1
 800361a:	60fa      	str	r2, [r7, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d102      	bne.n	8003626 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003620:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003624:	e026      	b.n	8003674 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800362a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0ef      	beq.n	8003616 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1ea      	bne.n	8003616 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d004      	beq.n	8003656 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2204      	movs	r2, #4
 8003650:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003652:	2304      	movs	r3, #4
 8003654:	e00e      	b.n	8003674 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d004      	beq.n	800366c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003668:	2301      	movs	r3, #1
 800366a:	e003      	b.n	8003674 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	22c5      	movs	r2, #197	@ 0xc5
 8003670:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	20000000 	.word	0x20000000
 8003684:	10624dd3 	.word	0x10624dd3

08003688 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003690:	4b1a      	ldr	r3, [pc, #104]	@ (80036fc <SDMMC_GetCmdResp3+0x74>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1a      	ldr	r2, [pc, #104]	@ (8003700 <SDMMC_GetCmdResp3+0x78>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	0a5b      	lsrs	r3, r3, #9
 800369c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036a0:	fb02 f303 	mul.w	r3, r2, r3
 80036a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	1e5a      	subs	r2, r3, #1
 80036aa:	60fa      	str	r2, [r7, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d102      	bne.n	80036b6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80036b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80036b4:	e01b      	b.n	80036ee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0ef      	beq.n	80036a6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1ea      	bne.n	80036a6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d004      	beq.n	80036e6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2204      	movs	r2, #4
 80036e0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80036e2:	2304      	movs	r3, #4
 80036e4:	e003      	b.n	80036ee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	22c5      	movs	r2, #197	@ 0xc5
 80036ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	20000000 	.word	0x20000000
 8003700:	10624dd3 	.word	0x10624dd3

08003704 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	460b      	mov	r3, r1
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003712:	4b35      	ldr	r3, [pc, #212]	@ (80037e8 <SDMMC_GetCmdResp6+0xe4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a35      	ldr	r2, [pc, #212]	@ (80037ec <SDMMC_GetCmdResp6+0xe8>)
 8003718:	fba2 2303 	umull	r2, r3, r2, r3
 800371c:	0a5b      	lsrs	r3, r3, #9
 800371e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003722:	fb02 f303 	mul.w	r3, r2, r3
 8003726:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	1e5a      	subs	r2, r3, #1
 800372c:	61fa      	str	r2, [r7, #28]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d102      	bne.n	8003738 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003732:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003736:	e052      	b.n	80037de <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800373c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0ef      	beq.n	8003728 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1ea      	bne.n	8003728 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003756:	f003 0304 	and.w	r3, r3, #4
 800375a:	2b00      	cmp	r3, #0
 800375c:	d004      	beq.n	8003768 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2204      	movs	r2, #4
 8003762:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003764:	2304      	movs	r3, #4
 8003766:	e03a      	b.n	80037de <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	d004      	beq.n	800377e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2201      	movs	r2, #1
 8003778:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800377a:	2301      	movs	r3, #1
 800377c:	e02f      	b.n	80037de <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f7ff fc0d 	bl	8002f9e <SDIO_GetCommandResponse>
 8003784:	4603      	mov	r3, r0
 8003786:	461a      	mov	r2, r3
 8003788:	7afb      	ldrb	r3, [r7, #11]
 800378a:	4293      	cmp	r3, r2
 800378c:	d001      	beq.n	8003792 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800378e:	2301      	movs	r3, #1
 8003790:	e025      	b.n	80037de <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	22c5      	movs	r2, #197	@ 0xc5
 8003796:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003798:	2100      	movs	r1, #0
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f7ff fc0c 	bl	8002fb8 <SDIO_GetResponse>
 80037a0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d106      	bne.n	80037ba <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	0c1b      	lsrs	r3, r3, #16
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80037b6:	2300      	movs	r3, #0
 80037b8:	e011      	b.n	80037de <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d002      	beq.n	80037ca <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80037c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80037c8:	e009      	b.n	80037de <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80037d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037d8:	e001      	b.n	80037de <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80037da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3720      	adds	r7, #32
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20000000 	.word	0x20000000
 80037ec:	10624dd3 	.word	0x10624dd3

080037f0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80037f8:	4b22      	ldr	r3, [pc, #136]	@ (8003884 <SDMMC_GetCmdResp7+0x94>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a22      	ldr	r2, [pc, #136]	@ (8003888 <SDMMC_GetCmdResp7+0x98>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	0a5b      	lsrs	r3, r3, #9
 8003804:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003808:	fb02 f303 	mul.w	r3, r2, r3
 800380c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	1e5a      	subs	r2, r3, #1
 8003812:	60fa      	str	r2, [r7, #12]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d102      	bne.n	800381e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003818:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800381c:	e02c      	b.n	8003878 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003822:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0ef      	beq.n	800380e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1ea      	bne.n	800380e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d004      	beq.n	800384e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2204      	movs	r2, #4
 8003848:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800384a:	2304      	movs	r3, #4
 800384c:	e014      	b.n	8003878 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d004      	beq.n	8003864 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003860:	2301      	movs	r3, #1
 8003862:	e009      	b.n	8003878 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2240      	movs	r2, #64	@ 0x40
 8003874:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003876:	2300      	movs	r3, #0
  
}
 8003878:	4618      	mov	r0, r3
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	20000000 	.word	0x20000000
 8003888:	10624dd3 	.word	0x10624dd3

0800388c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003894:	4b11      	ldr	r3, [pc, #68]	@ (80038dc <SDMMC_GetCmdError+0x50>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a11      	ldr	r2, [pc, #68]	@ (80038e0 <SDMMC_GetCmdError+0x54>)
 800389a:	fba2 2303 	umull	r2, r3, r2, r3
 800389e:	0a5b      	lsrs	r3, r3, #9
 80038a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038a4:	fb02 f303 	mul.w	r3, r2, r3
 80038a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	1e5a      	subs	r2, r3, #1
 80038ae:	60fa      	str	r2, [r7, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d102      	bne.n	80038ba <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80038b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80038b8:	e009      	b.n	80038ce <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f1      	beq.n	80038aa <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	22c5      	movs	r2, #197	@ 0xc5
 80038ca:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	20000000 	.word	0x20000000
 80038e0:	10624dd3 	.word	0x10624dd3

080038e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80038e8:	4904      	ldr	r1, [pc, #16]	@ (80038fc <MX_FATFS_Init+0x18>)
 80038ea:	4805      	ldr	r0, [pc, #20]	@ (8003900 <MX_FATFS_Init+0x1c>)
 80038ec:	f000 f9d6 	bl	8003c9c <FATFS_LinkDriver>
 80038f0:	4603      	mov	r3, r0
 80038f2:	461a      	mov	r2, r3
 80038f4:	4b03      	ldr	r3, [pc, #12]	@ (8003904 <MX_FATFS_Init+0x20>)
 80038f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80038f8:	bf00      	nop
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	20000100 	.word	0x20000100
 8003900:	08003d44 	.word	0x08003d44
 8003904:	200000fc 	.word	0x200000fc

08003908 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8003912:	f000 f86b 	bl	80039ec <BSP_SD_IsDetected>
 8003916:	4603      	mov	r3, r0
 8003918:	2b01      	cmp	r3, #1
 800391a:	d001      	beq.n	8003920 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e005      	b.n	800392c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8003920:	4804      	ldr	r0, [pc, #16]	@ (8003934 <BSP_SD_Init+0x2c>)
 8003922:	f7fe f851 	bl	80019c8 <HAL_SD_Init>
 8003926:	4603      	mov	r3, r0
 8003928:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800392a:	79fb      	ldrb	r3, [r7, #7]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	20000028 	.word	0x20000028

08003938 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b088      	sub	sp, #32
 800393c:	af02      	add	r7, sp, #8
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
 8003944:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	68f9      	ldr	r1, [r7, #12]
 8003954:	4806      	ldr	r0, [pc, #24]	@ (8003970 <BSP_SD_ReadBlocks+0x38>)
 8003956:	f7fe f8e7 	bl	8001b28 <HAL_SD_ReadBlocks>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8003964:	7dfb      	ldrb	r3, [r7, #23]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000028 	.word	0x20000028

08003974 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b088      	sub	sp, #32
 8003978:	af02      	add	r7, sp, #8
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	68f9      	ldr	r1, [r7, #12]
 8003990:	4806      	ldr	r0, [pc, #24]	@ (80039ac <BSP_SD_WriteBlocks+0x38>)
 8003992:	f7fe faaf 	bl	8001ef4 <HAL_SD_WriteBlocks>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80039a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	20000028 	.word	0x20000028

080039b0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80039b4:	4805      	ldr	r0, [pc, #20]	@ (80039cc <BSP_SD_GetCardState+0x1c>)
 80039b6:	f7fe fdfb 	bl	80025b0 <HAL_SD_GetCardState>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b04      	cmp	r3, #4
 80039be:	bf14      	ite	ne
 80039c0:	2301      	movne	r3, #1
 80039c2:	2300      	moveq	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000028 	.word	0x20000028

080039d0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	4803      	ldr	r0, [pc, #12]	@ (80039e8 <BSP_SD_GetCardInfo+0x18>)
 80039dc:	f7fe fdbc 	bl	8002558 <HAL_SD_GetCardInfo>
}
 80039e0:	bf00      	nop
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	20000028 	.word	0x20000028

080039ec <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80039f2:	2301      	movs	r3, #1
 80039f4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80039f6:	f000 f80b 	bl	8003a10 <BSP_PlatformIsDetected>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8003a00:	2300      	movs	r3, #0
 8003a02:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8003a04:	79fb      	ldrb	r3, [r7, #7]
 8003a06:	b2db      	uxtb	r3, r3
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8003a16:	2301      	movs	r3, #1
 8003a18:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8003a1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a1e:	4806      	ldr	r0, [pc, #24]	@ (8003a38 <BSP_PlatformIsDetected+0x28>)
 8003a20:	f7fd fb08 	bl	8001034 <HAL_GPIO_ReadPin>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40020000 	.word	0x40020000

08003a3c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4603      	mov	r3, r0
 8003a44:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8003a46:	4b0b      	ldr	r3, [pc, #44]	@ (8003a74 <SD_CheckStatus+0x38>)
 8003a48:	2201      	movs	r2, #1
 8003a4a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8003a4c:	f7ff ffb0 	bl	80039b0 <BSP_SD_GetCardState>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d107      	bne.n	8003a66 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8003a56:	4b07      	ldr	r3, [pc, #28]	@ (8003a74 <SD_CheckStatus+0x38>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	f023 0301 	bic.w	r3, r3, #1
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	4b04      	ldr	r3, [pc, #16]	@ (8003a74 <SD_CheckStatus+0x38>)
 8003a64:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8003a66:	4b03      	ldr	r3, [pc, #12]	@ (8003a74 <SD_CheckStatus+0x38>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	b2db      	uxtb	r3, r3
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	20000009 	.word	0x20000009

08003a78 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8003a82:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab0 <SD_initialize+0x38>)
 8003a84:	2201      	movs	r2, #1
 8003a86:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8003a88:	f7ff ff3e 	bl	8003908 <BSP_SD_Init>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d107      	bne.n	8003aa2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8003a92:	79fb      	ldrb	r3, [r7, #7]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff ffd1 	bl	8003a3c <SD_CheckStatus>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4b04      	ldr	r3, [pc, #16]	@ (8003ab0 <SD_initialize+0x38>)
 8003aa0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8003aa2:	4b03      	ldr	r3, [pc, #12]	@ (8003ab0 <SD_initialize+0x38>)
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	b2db      	uxtb	r3, r3
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	20000009 	.word	0x20000009

08003ab4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff ffbb 	bl	8003a3c <SD_CheckStatus>
 8003ac6:	4603      	mov	r3, r0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	607a      	str	r2, [r7, #4]
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	4603      	mov	r3, r0
 8003ade:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8003ae4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	68b8      	ldr	r0, [r7, #8]
 8003aee:	f7ff ff23 	bl	8003938 <BSP_SD_ReadBlocks>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d107      	bne.n	8003b08 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8003af8:	bf00      	nop
 8003afa:	f7ff ff59 	bl	80039b0 <BSP_SD_GetCardState>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1fa      	bne.n	8003afa <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8003b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b086      	sub	sp, #24
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	603b      	str	r3, [r7, #0]
 8003b1e:	4603      	mov	r3, r0
 8003b20:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8003b26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	68b8      	ldr	r0, [r7, #8]
 8003b30:	f7ff ff20 	bl	8003974 <BSP_SD_WriteBlocks>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d107      	bne.n	8003b4a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8003b3a:	bf00      	nop
 8003b3c:	f7ff ff38 	bl	80039b0 <BSP_SD_GetCardState>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1fa      	bne.n	8003b3c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8003b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3718      	adds	r7, #24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08c      	sub	sp, #48	@ 0x30
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	603a      	str	r2, [r7, #0]
 8003b5e:	71fb      	strb	r3, [r7, #7]
 8003b60:	460b      	mov	r3, r1
 8003b62:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003b6a:	4b25      	ldr	r3, [pc, #148]	@ (8003c00 <SD_ioctl+0xac>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <SD_ioctl+0x28>
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e03c      	b.n	8003bf6 <SD_ioctl+0xa2>

  switch (cmd)
 8003b7c:	79bb      	ldrb	r3, [r7, #6]
 8003b7e:	2b03      	cmp	r3, #3
 8003b80:	d834      	bhi.n	8003bec <SD_ioctl+0x98>
 8003b82:	a201      	add	r2, pc, #4	@ (adr r2, 8003b88 <SD_ioctl+0x34>)
 8003b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b88:	08003b99 	.word	0x08003b99
 8003b8c:	08003ba1 	.word	0x08003ba1
 8003b90:	08003bb9 	.word	0x08003bb9
 8003b94:	08003bd3 	.word	0x08003bd3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8003b9e:	e028      	b.n	8003bf2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8003ba0:	f107 030c 	add.w	r3, r7, #12
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff ff13 	bl	80039d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8003baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8003bb6:	e01c      	b.n	8003bf2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003bb8:	f107 030c 	add.w	r3, r7, #12
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff ff07 	bl	80039d0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8003bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8003bd0:	e00f      	b.n	8003bf2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003bd2:	f107 030c 	add.w	r3, r7, #12
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7ff fefa 	bl	80039d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bde:	0a5a      	lsrs	r2, r3, #9
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8003bea:	e002      	b.n	8003bf2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8003bec:	2304      	movs	r3, #4
 8003bee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8003bf2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3730      	adds	r7, #48	@ 0x30
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000009 	.word	0x20000009

08003c04 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b087      	sub	sp, #28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8003c12:	2301      	movs	r3, #1
 8003c14:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8003c16:	2300      	movs	r3, #0
 8003c18:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8003c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8003c98 <FATFS_LinkDriverEx+0x94>)
 8003c1c:	7a5b      	ldrb	r3, [r3, #9]
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d131      	bne.n	8003c88 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003c24:	4b1c      	ldr	r3, [pc, #112]	@ (8003c98 <FATFS_LinkDriverEx+0x94>)
 8003c26:	7a5b      	ldrb	r3, [r3, #9]
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003c98 <FATFS_LinkDriverEx+0x94>)
 8003c2e:	2100      	movs	r1, #0
 8003c30:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8003c32:	4b19      	ldr	r3, [pc, #100]	@ (8003c98 <FATFS_LinkDriverEx+0x94>)
 8003c34:	7a5b      	ldrb	r3, [r3, #9]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	4a17      	ldr	r2, [pc, #92]	@ (8003c98 <FATFS_LinkDriverEx+0x94>)
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8003c42:	4b15      	ldr	r3, [pc, #84]	@ (8003c98 <FATFS_LinkDriverEx+0x94>)
 8003c44:	7a5b      	ldrb	r3, [r3, #9]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	461a      	mov	r2, r3
 8003c4a:	4b13      	ldr	r3, [pc, #76]	@ (8003c98 <FATFS_LinkDriverEx+0x94>)
 8003c4c:	4413      	add	r3, r2
 8003c4e:	79fa      	ldrb	r2, [r7, #7]
 8003c50:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8003c52:	4b11      	ldr	r3, [pc, #68]	@ (8003c98 <FATFS_LinkDriverEx+0x94>)
 8003c54:	7a5b      	ldrb	r3, [r3, #9]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	b2d1      	uxtb	r1, r2
 8003c5c:	4a0e      	ldr	r2, [pc, #56]	@ (8003c98 <FATFS_LinkDriverEx+0x94>)
 8003c5e:	7251      	strb	r1, [r2, #9]
 8003c60:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8003c62:	7dbb      	ldrb	r3, [r7, #22]
 8003c64:	3330      	adds	r3, #48	@ 0x30
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	223a      	movs	r2, #58	@ 0x3a
 8003c72:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	3302      	adds	r3, #2
 8003c78:	222f      	movs	r2, #47	@ 0x2f
 8003c7a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	3303      	adds	r3, #3
 8003c80:	2200      	movs	r2, #0
 8003c82:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8003c84:	2300      	movs	r3, #0
 8003c86:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8003c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	371c      	adds	r7, #28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	20000104 	.word	0x20000104

08003c9c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	6839      	ldr	r1, [r7, #0]
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff ffaa 	bl	8003c04 <FATFS_LinkDriverEx>
 8003cb0:	4603      	mov	r3, r0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <memset>:
 8003cba:	4402      	add	r2, r0
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d100      	bne.n	8003cc4 <memset+0xa>
 8003cc2:	4770      	bx	lr
 8003cc4:	f803 1b01 	strb.w	r1, [r3], #1
 8003cc8:	e7f9      	b.n	8003cbe <memset+0x4>
	...

08003ccc <__libc_init_array>:
 8003ccc:	b570      	push	{r4, r5, r6, lr}
 8003cce:	4d0d      	ldr	r5, [pc, #52]	@ (8003d04 <__libc_init_array+0x38>)
 8003cd0:	4c0d      	ldr	r4, [pc, #52]	@ (8003d08 <__libc_init_array+0x3c>)
 8003cd2:	1b64      	subs	r4, r4, r5
 8003cd4:	10a4      	asrs	r4, r4, #2
 8003cd6:	2600      	movs	r6, #0
 8003cd8:	42a6      	cmp	r6, r4
 8003cda:	d109      	bne.n	8003cf0 <__libc_init_array+0x24>
 8003cdc:	4d0b      	ldr	r5, [pc, #44]	@ (8003d0c <__libc_init_array+0x40>)
 8003cde:	4c0c      	ldr	r4, [pc, #48]	@ (8003d10 <__libc_init_array+0x44>)
 8003ce0:	f000 f818 	bl	8003d14 <_init>
 8003ce4:	1b64      	subs	r4, r4, r5
 8003ce6:	10a4      	asrs	r4, r4, #2
 8003ce8:	2600      	movs	r6, #0
 8003cea:	42a6      	cmp	r6, r4
 8003cec:	d105      	bne.n	8003cfa <__libc_init_array+0x2e>
 8003cee:	bd70      	pop	{r4, r5, r6, pc}
 8003cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cf4:	4798      	blx	r3
 8003cf6:	3601      	adds	r6, #1
 8003cf8:	e7ee      	b.n	8003cd8 <__libc_init_array+0xc>
 8003cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cfe:	4798      	blx	r3
 8003d00:	3601      	adds	r6, #1
 8003d02:	e7f2      	b.n	8003cea <__libc_init_array+0x1e>
 8003d04:	08003d60 	.word	0x08003d60
 8003d08:	08003d60 	.word	0x08003d60
 8003d0c:	08003d60 	.word	0x08003d60
 8003d10:	08003d64 	.word	0x08003d64

08003d14 <_init>:
 8003d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d16:	bf00      	nop
 8003d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d1a:	bc08      	pop	{r3}
 8003d1c:	469e      	mov	lr, r3
 8003d1e:	4770      	bx	lr

08003d20 <_fini>:
 8003d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d22:	bf00      	nop
 8003d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d26:	bc08      	pop	{r3}
 8003d28:	469e      	mov	lr, r3
 8003d2a:	4770      	bx	lr
